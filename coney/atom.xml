<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[coney]]></title>
  <subtitle><![CDATA[有些事情,再不去做就忘了.有些人,再不去找就没了.]]></subtitle>
  <link href="/coney/atom.xml" rel="self"/>
  <link href="http://gengbiao.me/"/>
  <updated>2014-10-23T02:03:27.716Z</updated>
  <id>http://gengbiao.me/</id>
  
  <author>
    <name><![CDATA[coney]]></name>
    <email><![CDATA[i@gengbiao.me]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[hexo添加百度站内搜索]]></title>
    <link href="http://gengbiao.me/2014/10/22/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    <id>http://gengbiao.me/2014/10/22/hexo添加百度站内搜索/</id>
    <published>2014-10-21T16:00:00.000Z</published>
    <updated>2014-10-22T10:37:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo添加百度站内搜索">hexo添加百度站内搜索</h1>
<p>百度最近公开了站内搜索的公测，本人一直想做添加百度站内搜索到博客中，发现终于公测了，就抓紧下手了。<br>关于效果，首先大家可以看下<a href="http://search.gengbiao.me/cse/search?s=2049782880735612718&amp;q=" target="_blank" rel="external">我的站内搜索</a></p>
<h2 id="准备工作">准备工作</h2>
<h3 id="注册百度站长账号并添加站点">注册百度站长账号并添加站点</h3>
<p>首先你需要注册<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长</a>的账号，可以直接用百度账号登陆。<br>如果你是新用户，你首先应该在<code>我的网站/站点管理</code>里先<code>添加网站</code>.<br><img src="/img/baidu/baidu_add_site.png" alt="添加网站"><br>然后验证权限。<br><img src="/img/baidu/baidu_verification_site.png" alt="验证网站"><br>然后应该能看到验证成功。</p>
<h2 id="开启站内搜索">开启站内搜索</h2>
<p>点击<code>其他工具/站内搜索</code>.</p>
<p><img src="/img/baidu/baidu_search_config.png" alt="验证网站"></p>
<p>填写相关信息，填写完之后你就可以点击查看效果，这个时候你的站内搜索就完成了….一半了。</p>
<h3 id="提交数据">提交数据</h3>
<p>这个时候你应该发现站内搜索出来的数据很少，没错，因为即使是站内搜索，也是从百度的搜索数据库里提取的数据。所以你需要提供给百度数据。<br>可以点击 <code>提交数据</code> 或者 <code>收录绿色通道</code> 提交数据。<br><strong>我发现<code>提交数据</code>跟<code>收录绿色通道</code>的两个页面<code>提交网页列表</code>选项重复了，两者只能提交一个站图，推测是刚刚公测，产品不完善的原因。</strong><br>这里我选择<code>收录绿色通道</code>提交数据。<br><img src="/img/baidu/baidu_search_dataup.png" alt="提交数据"><br>其中<code>提交种子页面</code>写上自己的网站就可以了。<br>然后<code>提交网页列表</code>里面点击添加新数据。<br><img src="/img/baidu/baidu_search_add_data.png" alt="添加数据"><br>你可以一个个的添加，但是这样不仅收录效果不好，而且很麻烦。<br>在这里我选择第二种方式，添加sitemap.xml站图。<br><strong>使用hexo的朋友要注意的是：</strong><br>官方的插件列表里关于站图有两个：</p>
<p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a></p>
<p><a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">hexo-generator-baidu-sitemap</a><br>第一个不符合百度站图的标准，而且信息量很少。当时本人使用的时候发现了这个问题，遂自己开发了第二款插件。并添加了若干数据，目前还有诸多限制正在不断完善中，大家可以在<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">github</a><br>上跟我沟通，一起完善项目。<br>那么到现在事情就大功告成了！应该可以看到下图所示的内容：<br><img src="/img/baidu/baidu_sitemap_data.png" alt="百度站图"></p>
<h2 id="站内搜索优化">站内搜索优化</h2>
<h3 id="绑定二级域名">绑定二级域名</h3>
<p>大家可以看到我的站内搜索是search.gengbiao.me/xxx，不然转向的页面是<code>zhannei.baidu.com/XXX</code>,感觉像是跳出了自己的网站，非常不爽，这里可以绑定二级域名！<br>二级域名的绑定需要到你域名的DNS托管机构添加，我使用的是DNSPod.添加一条数据指向<code>zhannei.baidu.com</code><br><img src="/img/domain/dns_domain_twolevel.png" alt="二级域名解析"><br>就这样，你就可以使用自己的二级域名进行搜索了。</p>
<h3 id="结果页设置/搜索框样式">结果页设置/搜索框样式</h3>
<p>这个很简单，在百度站内搜索上都有引导的，大家可以尝试下。</p>
]]></content>
    
    
      <category term="DIY" scheme="http://gengbiao.me/tags/DIY/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js开发的常用模块总结]]></title>
    <link href="http://gengbiao.me/2014/10/22/node.js%E5%BC%80%E5%8F%91%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93/"/>
    <id>http://gengbiao.me/2014/10/22/node.js开发的常用模块总结/</id>
    <published>2014-10-21T16:00:00.000Z</published>
    <updated>2014-10-22T10:24:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Node-js开发的常用模块总结">Node.js开发的常用模块总结</h1>
<p>因为玩hexo的静态blog的原因，为了满足自己的需求，学了学node.js，自己动手写了<a href="">几个hexo的插件</a>。开发告一段落，估计过两个星期就把node.js忘了，跑来总结下。</p>
<h2 id="console">console</h2>
<p>console模块是Node提供的核心模块，提供基本的输出功能。虽然node.js采用的js语法，但是你千万不要在node.js使用alert进行调试，那是浏览器带的全局方法，会报错的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">console.log([format],<span class="keyword">...</span>) <span class="comment">##向控制台输出日志，类似的API还有info() err() warn()，</span></div><div class="line">                          <span class="comment">##格式有%s,%d,%j(json格式)</span></div><div class="line">console.info()</div><div class="line">console.warn()</div><div class="line">console.error()           <span class="comment">##与console.log()差不多</span></div><div class="line">    e.g. </div><div class="line">    console.log(<span class="string">'%s,%d,%j'</span>,<span class="string">'hello world'</span>,<span class="number">0</span>,{name:<span class="string">'coney'</span>,Sexy:<span class="string">'Male'</span>,age:<span class="number">18</span>,do:[<span class="string">'hexo'</span>,<span class="string">'node.js'</span>,<span class="string">'themes'</span>]});</div><div class="line">    <span class="comment">##输出：</span></div><div class="line">    hello world,<span class="number">0</span>,{<span class="string">"name"</span>:<span class="string">"coney"</span>,<span class="string">"Sexy"</span>:<span class="string">"Male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"do"</span>:[<span class="string">"hexo"</span>,<span class="string">"node.js"</span>,<span class="string">"themes"</span>]}</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.dir(object)       ##利用util.inspect()输出对象的分析</div><div class="line">	e.g.</div><div class="line">	<span class="keyword">var</span> Hexo = <span class="function"><span class="keyword">function</span><span class="params">(root,theme,version)</span>  </span></div><div class="line">	{  </div><div class="line">  		<span class="keyword">this</span>.root=root;  </div><div class="line">  		<span class="keyword">this</span>.themes=theme;  </div><div class="line">  		<span class="keyword">this</span>.version=version;</div><div class="line">	};  </div><div class="line">	<span class="keyword">var</span> myBlog = <span class="keyword">new</span> Person(<span class="string">'Users/workspace'</span>,<span class="string">'coney'</span>,<span class="number">1.0</span>);  </div><div class="line">	<span class="built_in">console</span>.dir(myBlog);  </div><div class="line">	<span class="built_in">console</span>.dir(Hexo); </div><div class="line">    ## 输出</div><div class="line">    {root: <span class="string">'Users/workspace'</span>, theme:<span class="string">'coney'</span>, version: <span class="number">1.0</span>}</div><div class="line">    [<span class="built_in">Function</span>]</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time(tag) </div><div class="line"><span class="built_in">console</span>.timeEnd(tag)      <span class="comment">##配合time() 生成一个测时器，并输出其间隔的时间</span></div><div class="line">                          <span class="comment">##time和timeEnd中不要输入中文，</span></div><div class="line">                          <span class="comment">##time和timeEnd中输入的参数要一致</span></div><div class="line">	e.g.</div><div class="line">	<span class="reserved">var</span> tag = <span class="string">'the time-consuming of sum operate'</span>;</div><div class="line">	<span class="built_in">console</span>.time(tag);</div><div class="line">	<span class="reserved">var</span> sum=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="reserved">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)</div><div class="line">	{</div><div class="line">		sum+=i;</div><div class="line">	}</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'sum=%d'</span>,sum);</div><div class="line">	<span class="built_in">console</span>.timeEnd(tag);</div><div class="line">	<span class="comment">##输出:</span></div><div class="line">		sum=<span class="number">49995000</span></div><div class="line">		the time-consuming <span class="keyword">of</span> sum <span class="attribute">operate</span>: <span class="number">9</span>ms</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.<span class="keyword">assert</span>(expr,msg)  <span class="comment">##若expr为假，则输出msg</span></div><div class="line">	e.g.</div><div class="line">	console.<span class="keyword">assert</span>(<span class="number">1</span>==<span class="number">2</span>,<span class="string">'above is wrong'</span>); </div><div class="line">	<span class="comment">##输出</span></div><div class="line">	AssertionError,above <span class="keyword">is</span> wrong</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="keyword">trace</span>(tag)        <span class="preprocessor">##输出当前的栈信息</span></div></pre></td></tr></table></figure>

<h2 id="URL与QueryString">URL与QueryString</h2>
<p>这两个模块是Node提供的核心模块，用于处理URL及URL中的查询串。通常情况下，不需要直接处理querystring，因为url模块的支持。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">url.parse(url,qs,sl)  </div><div class="line">					<span class="preprocessor">##将url解析为一个对象，其中包含host,hostname,port等字段，</span></div><div class="line">					<span class="preprocessor">##若qs为true，则调用querystring解析查询串</span></div><div class="line">url.<span class="built_in">format</span>(obj)        </div><div class="line">					<span class="preprocessor">##将obj生成为一个url字符串</span></div><div class="line">querystring.stringify(obj,<span class="string">'sep'</span>,<span class="string">'eq'</span>)  </div><div class="line">					<span class="preprocessor">##将对象obj生成查询串</span></div><div class="line">querystring.parse(str) </div><div class="line">					<span class="preprocessor">##解析查询串为对象</span></div></pre></td></tr></table></figure>

<h2 id="Path与File_System">Path与File System</h2>
<p>Path模块则提供了对路径名称的一些便捷操作，其将输入串作为路径栈来处理，与物理文件系统无关。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">path.normalize(<span class="string">'path'</span>)   <span class="comment">##处理path中的' . '与'..'</span></div><div class="line">path.join(<span class="operator">a</span>,b,..z)  	  <span class="comment">##处理为a/b/.../z，并对结果执行normalize</span></div><div class="line">path.resolve(<span class="operator">a</span>,b,...z)   <span class="comment">##对每个元素执行cd item，返回最终结果</span></div><div class="line">path.<span class="built_in">relative</span>(<span class="operator">a</span>,b)       <span class="comment">##返回b对于a的切换方式，可包含'.'与'..'</span></div><div class="line">path.dirname(path)       <span class="comment">##path.basename(path,'mask') 返回路径的目录部分与文件名部分</span></div><div class="line">path.extname(path)       <span class="comment">##返回路径的扩展名部分</span></div><div class="line">path.seq                 <span class="comment">##OS特定的路径分隔符 "\\" 或  "/"</span></div></pre></td></tr></table></figure>

<p>File System提供了对文件与目录的创建、删除、权限设置，并以及文件的打开、读写与关闭。文件API提供两套接口，分别支持同步与异步调用。区别是，同步情况异常会立即抛出，需要用try-catch捕获，而在异步情况下，异常会传递给回调函数处理。值得注意的是异步情况下，不同的事件的完成顺序是未决的，因而对于有顺序的操作，最好在函数的事件链中去完成。由于同步操作与POSIX同名调用类似，因此这里只介绍异步接口。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">fs.rename(oldPath, newPath, [<span class="keyword">callback</span>])   </div><div class="line">									<span class="preprocessor">##修改名字，回调函数为function(exception) {}</span></div><div class="line">fs.truncate(fd, len, [<span class="keyword">callback</span>])   <span class="preprocessor">##截断文件</span></div><div class="line">fs.chown(path, uid, gid, [<span class="keyword">callback</span>])  </div><div class="line">fs.fchown(fd, uid, gid, [<span class="keyword">callback</span>])  </div><div class="line">								  	<span class="preprocessor">##修改文件所属</span></div><div class="line">fs.chmod(path, mode, [<span class="keyword">callback</span>]) </div><div class="line">fs.fchmod(fd, mode, [<span class="keyword">callback</span>]) </div><div class="line">									<span class="preprocessor">##修改文件权限</span></div><div class="line">fs.stat(path, [<span class="keyword">callback</span>])   </div><div class="line">fs.lstat(path, [<span class="keyword">callback</span>])  </div><div class="line">fs.fstat(fd, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##返回文件stat，回调为function(err,state) {}</span></div><div class="line">fs.link(srcpath, dstpath, [<span class="keyword">callback</span>])  </div><div class="line">fs.symlink(srcpath, dstpath, [type], [<span class="keyword">callback</span>]) </div><div class="line">							<span class="preprocessor">##创建链接与符号链接</span></div><div class="line">fs.readlink(path, [<span class="keyword">callback</span>]) </div><div class="line">							<span class="preprocessor">##读取link的内容</span></div><div class="line">fs.unlink(path, [<span class="keyword">callback</span>])</div><div class="line">							<span class="preprocessor">##取消link</span></div><div class="line">fs.rmdir(path, [<span class="keyword">callback</span>])   </div><div class="line">fs.mkdir(path, [mode], [<span class="keyword">callback</span>])</div><div class="line">							<span class="preprocessor">##目录创建与删除</span></div><div class="line">fs.readdir(path, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##读取目录内容  回调为function(err,files) {}</span></div><div class="line">fs.open(path, flags, [mode], [<span class="keyword">callback</span>])    </div><div class="line">							<span class="preprocessor">##回调为function(err,fd) {}</span></div><div class="line">fs.write(fd, buffer, offset, length, position, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##回调为function(err,len,buf) ;</span></div><div class="line">fs.read(fd, buffer, offset, length, position, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##回调为function(err,len,buf) ;</span></div><div class="line">fs.close(fd, [<span class="keyword">callback</span>])</div><div class="line">fs.utimes(path, atime, mtime, [<span class="keyword">callback</span>])  </div><div class="line">fs.futimes(fd, atime, mtime, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##修改文件的访问时间与修改时间</span></div><div class="line">fs.fsync(fd, [<span class="keyword">callback</span>]) </div><div class="line">fs.readFile(filename, [encoding], [<span class="keyword">callback</span>])     </div><div class="line">							<span class="preprocessor">##高层接口，回调为function(err,data)</span></div><div class="line">fs.writeFile(filename, data, [encoding], [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##高层接口，回调为function(err)</span></div><div class="line">fs.appendFile(filename, data, encoding=<span class="string">'utf8'</span>, [<span class="keyword">callback</span>])</div><div class="line">fs.createReadStream(path,[opt]) </div><div class="line">fs.createWriteStream(path,[opt]) 从路径创建输入与输出流</div></pre></td></tr></table></figure>

<h2 id="Stream">Stream</h2>
<p>Stream是Node实现的一种面向流处理的接口，支持文件流、HTTP数据流、标准IO流等进行抽象操作。<br>Stream分为readStream与writeStream两种类型<br>read stream 定义了下列事件 data,end,error,close 用于在底层处理流的过程中回调用户的事件监听器。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span>Encoding(<span class="string">'charset'</span>)  <span class="comment">##设置流的字符编辑，默认为utf-8</span></div><div class="line">pause() resume() 		</div><div class="line">						<span class="comment">##暂停与恢复流处理，需要注意的是有些底层处理并不能立即生效,						##在pause一段时间内仍会抛出data事件</span></div><div class="line">destroy()       		<span class="comment">##在流处理结束后，释放流使得底层可以关闭文件</span></div><div class="line">pipe(dstream,[opt])     <span class="comment">##将输入流复制到目标输出流</span></div></pre></td></tr></table></figure>

<p>writable Stream定义了下列事件： </p>
<p>drain,error,close,pipe 用于底层在处理流的过程中回调用户的事件监听器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">write</span><span class="params">(string,[charset])</span>  </span></div><div class="line"><span class="title">write</span><span class="params">(buff)</span> 写入输出流</div><div class="line"><span class="title">end</span><span class="params">()</span>  </div><div class="line"><span class="title">end</span><span class="params">(string,encoding)</span> <span class="title">end</span><span class="params">(buf)</span> 定稿输出流并写入EOF</div><div class="line"><span class="title">destory</span><span class="params">()</span>/<span class="title">destroySoon</span><span class="params">()</span>  关闭底层资源，后者后将写入缓存区写空后释放。</div></pre></td></tr></table></figure>

<h2 id="定时器">定时器</h2>
<p>定时器操作被导出到全局命名空间中，不需要单独包含</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">setTimeout</span>(callback, delay, <span class="attr_selector">[arg...]</span>)   设置超时执行</div><div class="line"><span class="function">clearTimeout</span>(timeoutId)    </div><div class="line"><span class="function">setInterval</span>(callback, delay, <span class="attr_selector">[arg...]</span>)    设置间隔执行</div><div class="line"><span class="function">clearInterval</span>(intervalId)</div></pre></td></tr></table></figure>

<h2 id="child_process">child process</h2>
<p>此模块提供了操作子进程以及与进程间通信的基本功能。这个模块提供执行子进程的四种方式，并返回子进程的抽象，ChildProcess类型的实例。子进程类型其实是一个事件发生器，其上定义了子进程生命周期中的各种事件，如exit, close, message,disconnect事件。实例可以取到对应进程的相关属性如标准输入、输出、错误、进程ID，此外还提供了对进程发送消息的接口send,kill()和disconnect()。</p>
<h3 id="创建进程">创建进程</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">spawn(cmd, [args,<span class="keyword">...</span>], [opt])  </div><div class="line">                             <span class="comment">##基于cmd命令执行一个子进程，命令的参数为args，若无则为空</span></div><div class="line">                             <span class="comment">##数据。option={cwd, stdio, customFds, </span></div><div class="line">                             <span class="comment">##env, detatched}</span></div><div class="line">exec(cmd,[opt],callback )    </div><div class="line">                             <span class="comment">##基于cmd命令执行子进程，命令参数为空格分隔。回调的原型为</span></div><div class="line">                             <span class="comment">##function(err,stdout, stderr) {}。</span></div><div class="line">                             <span class="comment">##option={cwd, stdio, customFds, env,encoding,</span></div><div class="line">                             <span class="comment">##timeout,maxBuffer,killSignal}</span></div><div class="line">execfile(file , [args,<span class="keyword">...</span>], [opt],callback)  </div><div class="line">                             <span class="comment">##对于非shell命令的程序，可以通过execfile来执行，</span></div><div class="line">                             <span class="comment">##回调函数原型为function(err,stdout, stderr) {}。</span></div><div class="line">                             <span class="comment">##option={cwd, stdio, customFds, env,encoding,</span></div><div class="line">                             <span class="comment">##timeout,maxBuffer,killSignal}</span></div><div class="line">fork(module, [args,<span class="keyword">...</span>],[opt])  </div><div class="line">                             <span class="comment">##在子进程中执行一个node模块。</span></div><div class="line">                             <span class="comment">##option={cwn,env,encoding}.</span></div></pre></td></tr></table></figure>

<h3 id="选项说明">选项说明</h3>
<ol>
<li><p><code>cwd</code>:当前工作区</p>
</li>
<li><p><code>env</code>: 进程执行环境</p>
</li>
<li><p><code>stdio</code>: 一个数组，数组每个位置对应子进程的一个文件fd，每个位置的值可能为pipe, ipc,ignore,stream obj, null, 正数。pipe表示创建一个父子间的管道，父进程可以通过child_process.stdio[fd]来获取写入端。IPC，创建一个IPC信道。可以使用send()来向此文件fd进行消息的传递，并在接受方引发on(‘message’)事件。 ignore：忽略IO，重定向到/dev/null。</p>
</li>
<li><p><code>Stream obj</code>:在进程间共享一个re/wt 流对象，以操作子进程的TTY,FILE,PIPE,SOCKET等。正整数：其值表示在父进程中打开的文件fd，共享给子进程。null，使用默认值。0,1,2为pipe，&gt;3的为ignore。为了方便书写， node定义了三个数组，’ignore’，’pipe’，’inherit’，分别表示对于0-2的文件进行相应的操作<br>例如，如果想让子进程直接使用父进程的输出，可以require(‘child_process’).spawn(‘ls’,[ ],{stdio:‘inherit’});</p>
</li>
<li><p><code>detached</code>:让子进程成为新进程组的首进程，从而在父进程退出后仍可继续执行。默认情况下父进程会等子detached进程的结束，可以通过child.unref()来避免这种等待。尽管如此，若希望子进程正常执行，仍需要将子进程与父进程的控制终端相剥离。</p>
</li>
<li><p><code>timeout</code>:若&gt;0，则在执行超时后由选项指定的信号终止。</p>
</li>
<li><p><code>killSignal</code>:指定期望接收的终止信号</p>
</li>
<li><p><code>maxBuffer</code>:指定标准输出和错误的最大数据量，超出后子进程被kill</p>
</li>
</ol>
<h3 id="ChildProcess对象">ChildProcess对象</h3>
<p>本类是子进程的抽象对象，支持以下操作和属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span>(signal)   </div><div class="line">			<span class="comment">##使用信号终止进程</span></div><div class="line"><span class="built_in">send</span>(msg, [sendHandler])  </div><div class="line">			<span class="comment">##这里需要注意的是，在父进程中调用send()的事件会被子进程注册的事件处理</span></div><div class="line">			<span class="comment">##函数处理，而在子进程中给自己send()会触发在父进程中注册的事件处理函数。</span></div><div class="line">disconnect()</div><div class="line"><span class="keyword">stdin</span>,<span class="keyword">stdout</span>,<span class="keyword">stderr</span>,  Readable Stream或Writable Stream</div><div class="line">pid：</div><div class="line">    <span class="comment">##子进程的PID</span></div><div class="line"><span class="comment">##子进程在执行过程中会触发以下事件：</span></div><div class="line">exit：</div><div class="line">    <span class="comment">##进程终止时触发。回调function(code,signal) ，若进程正常结束，则code为执行进程的</span></div><div class="line">    <span class="comment">##退出码，否则为null。若进程由信号终止，则signal为收到的信号。</span></div><div class="line"><span class="built_in">close</span>：</div><div class="line">	<span class="comment">##进程的 stdio流结合时触发</span></div><div class="line">disconnect：</div><div class="line">	<span class="comment">##调用dieconnect()后触发，调用后不可以再向子进程发送消息，可以检查</span></div><div class="line">	<span class="comment">##child.connected属性</span></div><div class="line">message：</div><div class="line">	<span class="comment">##在调用send()后触发，function(msg,sendHandler){}</span></div><div class="line">	<span class="comment">##sH可能为socket对象，或server对象。</span></div></pre></td></tr></table></figure>

<h2 id="global">global</h2>
<p>全局空间可以访问console,process,buffer,timer模块，不需要require<br>console与timer在上面已有说明，process提供了node执行进程的运行环境、参数、进程的gid,uid,运行时间等等，具体可以查找process模块</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">__filename</span> <span class="comment">##当前执行脚本的文件名</span></div><div class="line">__dirname  <span class="comment">##当前执行脚本的所在目录</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="node.js" scheme="http://gengbiao.me/tags/node-js/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[coney主题的博客颜色更改]]></title>
    <link href="http://gengbiao.me/2014/10/16/coney%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/"/>
    <id>http://gengbiao.me/2014/10/16/coney主题的博客颜色更改/</id>
    <published>2014-10-15T16:00:00.000Z</published>
    <updated>2014-10-22T10:33:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="coney主题">coney主题</h1>
<p>因为最近一直在不断更新，建议你们可以选择star<a href="https://github.com/coneycode/coney" target="_blank" rel="external">我的主题</a>，及时得到我的更新通知。<br>最后更新时间： 2014-10-18<br>已经安装的朋友可以选择升级主题:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/coney</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>

<h2 id="主题颜色更改">主题颜色更改</h2>
<h3 id="依赖">依赖</h3>
<p>目前官方还未支持十六进制颜色与String值的转换,所以需要手动添加依赖包，本人已经向作者提交了issue，该问题估计稍后会解决</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##在博客的目录下输入下面指令</span></div><div class="line"><span class="built_in">cd</span> node_modules/hexo-renderer-stylus </div><div class="line"><span class="built_in">sudo</span> npm install stylus@<span class="number">0.49</span>.<span class="number">2</span>  <span class="comment">#根据系统文件的权限不同，有的不需要加sudo,这里默认没有写权限，需要用管理员权限执行指令</span></div></pre></td></tr></table></figure>

<h3 id="更改主题颜色">更改主题颜色</h3>
<p>在hexo博客目录下的<code>_config.yml</code>的 <code>theme_color</code>下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme_color</span>: <span class="string"></span></div><div class="line">    <span class="attribute">background</span>: <span class="string">"#dddddd"  #博客背景</span></div><div class="line">    <span class="attribute">font</span>: <span class="string">"#817c7c"        #博客字体</span></div><div class="line">    <span class="attribute">theme</span>: <span class="string">'#ea6753'       #博客主题颜色</span></div><div class="line">    <span class="attribute">footer</span>: <span class="string">"#ffffff"      #博客页脚颜色</span></div></pre></td></tr></table></figure>

<h3 id="更改百度分享颜色">更改百度分享颜色</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">baidu_share:¬</div><div class="line">   enable: <span class="literal">true</span></div><div class="line">   color: <span class="number">4</span> <span class="comment">##百度分享栏的颜色设置，一共有九种颜色,详情见下图</span></div></pre></td></tr></table></figure>

<p><img src="/img/hexo/baidu_share.png" alt="baidu_item_color"></p>
<p>按图示，从左到右分别是<br>第一行 0 | 1 | 2 | 3 | 4<br>第二行 5 | 6 | 7 | 8</p>
<p>稍后还会公开更多的颜色配置给大家。</p>
]]></content>
    
    
      <category term="主题" scheme="http://gengbiao.me/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="DIY" scheme="http://gengbiao.me/tags/DIY/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git_分支_合并_自定义合并项]]></title>
    <link href="http://gengbiao.me/2014/10/16/git_%E5%88%86%E6%94%AF_%E5%90%88%E5%B9%B6_%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E5%B9%B6%E9%A1%B9/"/>
    <id>http://gengbiao.me/2014/10/16/git_分支_合并_自定义合并项/</id>
    <published>2014-10-15T16:00:00.000Z</published>
    <updated>2014-10-20T12:27:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git_分支">git 分支</h1>
<h2 id="github_分支的相关指令">github 分支的相关指令</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git branch <span class="comment">#列出本地存在的分支</span></div><div class="line">git branch -r <span class="comment">#列出远程存在的分支</span></div><div class="line">git branch <span class="operator">-a</span> <span class="comment">#列出远程和本地存在的分支</span></div><div class="line">git branch &lt;文件名&gt; <span class="comment">#创建一个新分支，比如 git branch aa ,创建了一个aa的分支.</span></div><div class="line">git branch -m oldbranch newbranch <span class="comment">#重命名分支，如果需要强制重命名用大写的-M.</span></div><div class="line">git branch <span class="operator">-d</span> branchname <span class="comment">#删除branchname分支,如果需要强制重命名用大写的-D.</span></div><div class="line">git branch <span class="operator">-d</span> -r branchname <span class="comment">#删除远程branchname分支</span></div></pre></td></tr></table></figure>

<h3 id="github_分支的切换">github 分支的切换</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout branchname <span class="comment">#切换到某分支下，如 git checkout aa,即切换到了aa 分支下</span></div><div class="line">git checkout -b newbranch <span class="comment"># 创建新分支，并跳到该分支下</span></div></pre></td></tr></table></figure>

<p>搞定。</p>
<h3 id="github_分支的合并">github 分支的合并</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">merge</span> branchname <span class="comment">#把当前分支与指定分支合并 </span></div><div class="line">    e.g. git <span class="built_in">merge</span> aa <span class="comment">#将当前分支与分支名为aa的分支合并</span></div><div class="line">git <span class="built_in">merge</span> branchname1 branchname2 <span class="comment">#把当前分支与指定多个分支合并 </span></div><div class="line">    e.g. git <span class="built_in">merge</span> aa bb <span class="comment">#将当前分支与分支名为aa和bb的的分支合并</span></div></pre></td></tr></table></figure>

<h3 id="忽略某些文件的合并">忽略某些文件的合并</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git checkout aa  #切换到分支aa</div><div class="line">vim .gitattributes #创建.gitattributes文件并用vim打开</div><div class="line">config.yml merge=ours. #将前面这句话写入.gitattributes</div><div class="line"><span class="attribute">:wq #在vim的命令行下敲入:wq,</span> 保存并退出vim.</div><div class="line">git add .gitattributes  #add 该文件</div><div class="line">git commit -m "your commit" #commit 该文件</div></pre></td></tr></table></figure>

<p><code>config.yml merge=ours</code>这句话的意思是当合并时，如果与其他分支的config.yml文件发<br>生冲突，取消合并，使用当前分支下的config.yml文件.<br>然后切换到另一个想要合并的分支B中重复刚才的操作。<br>最后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="operator"><span class="keyword">merge</span> 分支名</span></div></pre></td></tr></table></figure>

<p>大功告成!</p>
<h3 id="合并指定文件">合并指定文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout branchname -- file1 file2 etc <span class="comment">#合并分支里制定的文件</span></div><div class="line">    e.g. git checkout aa -- file1 file2 <span class="comment">#将当前分支的file1 file2 与分支名为aa下的file1 file2文件合并</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="git" scheme="http://gengbiao.me/tags/git/"/>
    
      <category term="技术-Git" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF-Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[terminal 常见指令汇总]]></title>
    <link href="http://gengbiao.me/2014/10/13/terminal_%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://gengbiao.me/2014/10/13/terminal_终端常用指令/</id>
    <published>2014-10-12T16:00:00.000Z</published>
    <updated>2014-10-20T13:46:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Terminal_终端常用指令">Terminal 终端常用指令</h1>
<h2 id="文件操作">文件操作</h2>
<h3 id="添加文件/文件夹">添加文件/文件夹</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> touch filename <span class="comment">#添加文件 </span></div><div class="line">      e.g. touch aa.md  <span class="comment">#添加文件名为aa的markdown文件</span></div><div class="line">      e.g. touch aa.txt  <span class="comment">#添加文件名为aa的文本文件</span></div><div class="line"><span class="keyword">mkdir</span> folderName <span class="comment">#添加文件夹</span></div><div class="line">      e.g. <span class="keyword">mkdir</span> aa  <span class="comment">#添加名为aa的文件夹</span></div></pre></td></tr></table></figure>

<h3 id="重命名|移动_文件/文件夹">重命名|移动 文件/文件夹</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mv oldname newname <span class="comment">#重命名文件/文件夹</span></div><div class="line">   e.g. mv <span class="operator">a</span> b <span class="comment">#将a的名称更改为b</span></div><div class="line">mv FilePath newPath <span class="comment">#移动文件,注意，如果不是当前目录下的子目录，要写绝对路径</span></div><div class="line">   e.g. mv aa.txt /usr/<span class="built_in">local</span>/ <span class="comment">#将当前目录下的aa.txt移动到/usr/local/下面.</span></div><div class="line"><span class="comment">#这里同理可以联想下cp的复制指令</span></div><div class="line">cp FilePath newPath <span class="comment">#复制文件,注意，如果不是当前目录下的子目录，要写绝对路径</span></div></pre></td></tr></table></figure>

<h3 id="复制一个文件的内容到另一个文件">复制一个文件的内容到另一个文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">cat file1 &gt;</span> file2 <span class="comment">#将file1里的内容复制到file2里面，并覆盖file2里的内容</span></span></div><div class="line"><span class="input"><span class="prompt">cat file1 &gt;&gt;</span> file2 <span class="comment">#将file1里的内容追加到file2的结尾，不覆盖file2里的内容</span></span></div><div class="line">cat file1 file2 &gt;file <span class="comment">#依次将file1 file2 的内容添加到file3中</span></div><div class="line">cat file1 <span class="comment">#查看file1的完整内容</span></div></pre></td></tr></table></figure>

<h3 id="清空某个文件">清空某个文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">cat /dev/null &gt;</span> file1 <span class="comment">#将file1的内容清空，大小为0，但是不删除,原文件被放到回收站</span></span></div><div class="line">rm  file1 <span class="comment">#删除file1</span></div></pre></td></tr></table></figure>

<h3 id="删除文件夹">删除文件夹</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">rmdir</span>  --ignore-fail-<span class="built_in">on</span>-non-empty folderName </div><div class="line">        <span class="comment">#删除文件夹以及子文件夹和子文件.¬</span></div><div class="line">        <span class="comment"># --ignore-fail-on-non-empty是指忽略文件是否为空，已经执行删除</span></div><div class="line"><span class="comment">#本人不喜欢这种删除方式，想删除非空文件夹也可以使用下面的方法</span></div><div class="line">rm -rf folderName <span class="comment">#删除文件夹以及子文件夹和子文件.</span></div><div class="line">                 <span class="comment"># -r 为递归指令，Linux跟Unix 的系统之间有些会区分大小写.</span></div><div class="line">                 <span class="comment"># -f 为强制执行指令，使用需谨慎，有时候需要加上这个指令才能rm成功.</span></div><div class="line">                 <span class="comment"># -rf 如果单独使用-r,需要对每一个文件确认后才能删除,所以推荐-rf</span></div><div class="line"><span class="comment">#rm 也可以用来删除文件</span></div><div class="line">rm -r fileName  <span class="comment">#删除文件.</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="order" scheme="http://gengbiao.me/tags/order/"/>
    
      <category term="Terminal" scheme="http://gengbiao.me/categories/Terminal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[coney主题介绍]]></title>
    <link href="http://gengbiao.me/2014/10/13/coney%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D/"/>
    <id>http://gengbiao.me/2014/10/13/coney主题介绍/</id>
    <published>2014-10-12T16:00:00.000Z</published>
    <updated>2014-10-23T01:59:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="coney主题介绍">coney主题介绍</h1>
<p>coney主题是<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>的一款主题.基于<a href="https://github.com/A-limon/pacman" target="_blank" rel="external">pacman主题</a>的样式改写的。支持不同分辨率的使用。</p>
<p>因为最近一直在不断更新，建议你们可以选择star<a href="https://github.com/coneycode/coney-hexo-theme" target="_blank" rel="external">我的主题</a>，及时得到我的更新通知。<br>最后更新时间： 2014-10-18<br>已经安装的朋友可以选择升级主题:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/coney</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>

<h2 id="安装">安装</h2>
<h3 id="安装-1">安装</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -<span class="keyword">b</span> master http<span class="variable">s:</span>//github.<span class="keyword">com</span>/coneycode/coney themes/coney</div></pre></td></tr></table></figure>

<p><strong>注意：Coney 要求至少在 Hexo 2.4.5 以上.</strong> </p>
<h3 id="使用">使用</h3>
<p>在hexo博客目录下的<code>_config.yml</code>里将 <code>theme</code> 设置成 <code>coney</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme</span>: <span class="string">coney</span></div></pre></td></tr></table></figure>

<h3 id="升级">升级</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/coney</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>

<p><strong>注意升级前备份好<code>theme/coney/_config.yml</code>以防自己的配置丢失</strong> </p>
<h2 id="配置">配置</h2>
<p>配置文件在 <code>/themes/coney/_config.yml</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####菜单</span></div><div class="line">menu:</div><div class="line">  首页: /</div><div class="line">  归档: /archives</div><div class="line"><span class="comment">## 使用标签或者分类需要在你的博客根目录下的`../source`中创建两个文件夹`tags`和`categories`.</span></div><div class="line"><span class="comment">## 然后分别在文件夹下创建文件`index.md`.内容如下，可以直接复制粘贴，注意去掉##：</span></div><div class="line"><span class="comment">##(categories中将tags换成 categories)</span></div><div class="line"><span class="comment">## layout: tags</span></div><div class="line"><span class="comment">## title: tags </span></div><div class="line"><span class="comment">## ---</span></div><div class="line"><span class="comment">#### 平台，即头像下方的需要显示的数据，不想添加的去掉就好</span></div><div class="line">widgets: </div><div class="line">- category  - <span class="comment">##分类使用标签或者分类需要在你的博客根目录下的`../source`中创建两个文件夹`tags`和`categories`.然后分别在文件夹下创建文件`index.md`.内容如下，(categories中将tags换成 categories)可以直接复制粘贴：</span></div><div class="line">layout: tags</div><div class="line">title: tags </div><div class="line"><span class="comment">---</span></div><div class="line">- tag       - <span class="comment">## 标签</span></div><div class="line">- links     - <span class="comment">## 友情链接,你可以修改自己的links在 `/layout/_widget/links.ejs`默认为本人的博客和hexo主页.</span></div><div class="line">- rss       - <span class="comment">## rss订阅</span></div><div class="line">- tagcloud  - <span class="comment">## 标签云</span></div><div class="line"><span class="comment">#### RSS</span></div><div class="line">rss:  atom.xml <span class="comment">## 即你本人的rss地址名称，一般不用更改。</span></div><div class="line"><span class="comment">#### Image</span></div><div class="line">imglogo:    <span class="comment">## 即你名称左边的logo是否显示，本人觉得logo略鸡肋，但是鉴于每个人的审美不同，保留此功能.默认关闭</span></div><div class="line">  enable: <span class="constant">false</span>            <span class="comment">##默认关闭           </span></div><div class="line">  src: img/logo.svg        <span class="comment">##推荐使用`.svg`或者`.png` 将图片放置在 `/coney/source/img`.</span></div><div class="line">favicon: img/favicon.ico   <span class="comment">## 即浏览器标签上显示的图片，大小: 32px*32px,`.ico`  将图片放置在 `/coney/source/img`.</span></div><div class="line"><span class="comment">#### 作者头像</span></div><div class="line">author_img_enable: <span class="constant">true</span> <span class="comment">## 是不是显示作者的头像</span></div><div class="line">author_img: img/coney.png <span class="comment">## 作者头像，size: 220px*220px.</span></div><div class="line"><span class="comment">#### 字体</span></div><div class="line">ShowCustomFont: <span class="constant">true</span>  <span class="comment">## 你可以自定义你的字体,路径在 `/coney/source/css/variable.styl` 和 `/coney/source/css/font.styl`.</span></div><div class="line"><span class="comment">#### 目录</span></div><div class="line">toc:</div><div class="line">  article: <span class="constant">true</span>   <span class="comment">## 是不是在文章中显示目录.如果某一篇文章中你不想显示侧边栏，可以在正文之前 `front-matter`中添加属性`toc: false`.</span></div><div class="line">  aside: <span class="constant">true</span>     <span class="comment">## 是不是在侧边栏中显示目录.</span></div><div class="line"><span class="comment">#### Fancybox</span></div><div class="line">fancybox: <span class="constant">false</span> <span class="comment">##默认关闭，如果你使用Hexo经常发表Gallery类型的文章，那么请设置为true（同时需要复制fancybox.js到你的博客目录下scripts文件夹中）。</span></div><div class="line"><span class="comment">#### 作者信息，就是填写一些作者的相关信息</span></div><div class="line">author:</div><div class="line">  google_plus:    <span class="comment">## e.g. 116338260303228776998 指向 https://plus.google.com/u/0/116338260303228776998</span></div><div class="line">  weibo:      coneylife <span class="comment">## e.g. 436062867 指向 http://weibo.com/436062867</span></div><div class="line">  twitter:    <span class="comment">## e.g. gengbiaosky 指向 https://twitter.com/yangjiansky</span></div><div class="line">  github:     coneycode <span class="comment">## e.g. coneycode 指向 https://github.com/coneycode</span></div><div class="line">  facebook:   <span class="comment">## e.g. gengbiao 指向 https://favebook.com/yangjian</span></div><div class="line">  tsina:      <span class="number">1005055274569156</span> <span class="comment">## e.g. 1664838973  这个是你的微博地址，在分享中其他人会自动@你。</span></div><div class="line">  zhihu:     <span class="comment"># coneylife, 现在知乎还没有icon，我已经提交了icon申请到Font-Awesome，静候佳音，我会第一时间更新.</span></div><div class="line"><span class="comment">#### 评论</span></div><div class="line">duoshuo: </div><div class="line">  enable: <span class="constant">true</span>  <span class="comment">## 多说评论系统，系统默认disqus，但是大陆不好用你懂的。。</span></div><div class="line">  short_name: coney <span class="comment">## 评论时显示的名字.</span></div><div class="line"><span class="comment">#### 分享</span></div><div class="line">jiathis:</div><div class="line">  enable: <span class="constant">false</span> <span class="comment">##  加网分享系统。默认关闭，因为主题已经内置了原生的分享功能。</span></div><div class="line">  id:    <span class="comment">## e.g. 1501277 加网ID. </span></div><div class="line">  tsina: <span class="comment">## e.g. 1664838973 微博ID,会被用在分享功能中自动@你.</span></div><div class="line"><span class="comment">####百度分析</span></div><div class="line">baidu_analytics:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  id: <span class="number">391982416296</span>a0d54221f59fe35250d4 <span class="comment"># 你的百度分析ID</span></div><div class="line"><span class="comment">####百度分享</span></div><div class="line">baidu_share:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  color: <span class="number">4</span> <span class="comment">##百度分享栏的颜色设置，一共有九种颜色，详情在最后面的附录`coney主题的博客颜色更改`</span></div><div class="line"><span class="comment">####主题颜色修改,目前官方还未支持十六进制颜色与String值的转换</span></div><div class="line"><span class="comment">####想更改颜色需要查看最后面附录的`coney主题的博客颜色更改`¬</span></div><div class="line">theme_color: </div><div class="line">    background: <span class="string">"#dddddd"</span>  <span class="comment">#博客背景</span></div><div class="line">    font: <span class="string">"#817c7c"</span>        <span class="comment">#博客字体</span></div><div class="line">    theme: <span class="string">'#ea6753'</span>       <span class="comment">#博客主题颜色</span></div><div class="line">    footer: <span class="string">"#ffffff"</span>      <span class="comment">#博客页脚颜色</span></div><div class="line"><span class="comment">####百度站内搜索 </span></div><div class="line">baidu_search:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  id: <span class="string">'2049782880735612718'</span> <span class="comment">##你的百度站内搜索ID</span></div><div class="line">  site: <span class="keyword">http</span>://search.baidu.com/cse/search  <span class="comment">#http://search.gengbiao.me/cse/search，百度站内搜索url，你可以用自己的地址指向百度默认站内搜索后更改此处。</span></div><div class="line"><span class="comment">####谷歌分析</span></div><div class="line">google_analytics:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  id:   <span class="comment">## e.g. UA-55273525-1 谷歌分析ID.*Google Analytics已经升级到了Universal Analytics。请先前往后台升级你的Google Analytics版本后再启用追踪代码,链接地址在下面。</span></div><div class="line">  site: <span class="comment">## e.g.gengbiao.me  谷歌分析的站点，默认会添加本博客。</span></div><div class="line"><span class="comment">####background music </span></div><div class="line">background_music:</div><div class="line">  enable: <span class="constant">false</span></div><div class="line">  src: </div><div class="line"><span class="comment">#### 谷歌站内搜索</span></div><div class="line">google_cse: </div><div class="line">  enable: <span class="constant">false</span>  </div><div class="line">  cx: <span class="number">010584917530731754670</span>:<span class="number">91</span>c2z8qybp0  <span class="comment">## e.g. 010584917530731754670:91c2z8qybp0 你的谷歌搜索ID，但是在大陆经常不能用你懂的。https://www.google.com/cse/ 如果开启此功能，需要在博客根目录的 '/source'中创建文件夹 '/search'，然后在文件夹中创建"index.md"文件。文件内容如下：</span></div><div class="line">layout: search </div><div class="line">title: search</div><div class="line"><span class="comment">---</span></div></pre></td></tr></table></figure>

<p>附录：<br><a href="https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN" target="_blank" rel="external">谷歌分析升级详情</a><br><a href="http://gengbiao.me/2014/10/16/coney%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/" target="_blank" rel="external">coney主题的博客颜色更改</a></p>
]]></content>
    
    
      <category term="主题" scheme="http://gengbiao.me/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下终极shell—zsh + vim 的配色方案]]></title>
    <link href="http://gengbiao.me/2014/09/22/Mac%E4%B8%8B%E7%BB%88%E6%9E%81shell%E2%80%94zsh_+_vim_%E7%9A%84%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
    <id>http://gengbiao.me/2014/09/22/Mac下终极shell—zsh_+_vim_的配色方案/</id>
    <published>2014-09-21T16:00:00.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mac下_终端_+_vim_的配色方案">Mac下 终端 + vim 的配色方案</h1>
<p>前两天电脑挂掉了，重新配置了工作环境，顺手记录一下。</p>
<h2 id="终端的配色">终端的配色</h2>
<p>———-先放着。。明天补。。-_-!<br>国庆本来打算整理下这些东西，无意间发现了zsh这货，把shell更换成zsh后发现终端变得<br>好迅速。</p>
<h2 id="什么是zsh">什么是zsh</h2>
<p>好吧，想知道这个，首先要明白什么是shell</p>
<h3 id="什么是shell">什么是shell</h3>
<p>shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收<br>用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是<br>真正干活的，干完之后再把结果返回用户或应用程序。<br>想查看本机有多少shell，可以使用指令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> /etc/shells</div></pre></td></tr></table></figure>

<p>显示如下<br><img src="http://coney.qiniudn.com/mac_5FAE29D3-8FD0-4FF2-923C-77388C6CD0FD.png?attname=&amp;e=1412860785&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:By1m3MYhwz5tTZjOpoyZyZLa0WI" alt="shells List"><br>这都不是重点，重点是zsh这个shell<br>目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是<br>深藏不露的 zsh， 这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但<br>是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不<br>说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的<br>zsh项目，叫做「oh my zsh」，Github 网址是：<br><a href="https://github.com/robbyrussell/oh-my-zsh。" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh。</a>  这玩意就像「X天叫你学会 C++」系列，可<br>以让你神功速成，而且是真的。</p>
<h2 id="安装zsh">安装zsh</h2>
<p>这里只写出mac的安装方法，其他方法可以看github的主页。<br>自动安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/raw/master/tools/install.<span class="keyword">sh</span> -O -| <span class="keyword">sh</span></div></pre></td></tr></table></figure>

<p>手动安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div><div class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-<span class="keyword">template</span> ~/.zshrc</div></pre></td></tr></table></figure>

<p>然后重新打开一个终端窗口默认shell就变成zsh了。<br>cool！</p>
<h2 id="配置zsh">配置zsh</h2>
<p>zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开<br>.zshrc<br>需要注意的是,以前用过shell的大家应该都用过<code>.bash_profile</code>,这里其实<code>.zshrc</code>跟<br><code>.bash_profile</code>本质上是一样的，可以把代码直接粘贴过来。然后附录一些个人认为比较<br>好用的配置。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="title">cls</span>=<span class="comment">'clear'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">ll</span>=<span class="comment">'ls -l'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">la</span>=<span class="comment">'ls -a'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">vi</span>=<span class="comment">'vim'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">javac</span>=<span class="string">"javac -J-Dfile.encoding=utf8"</span></div><div class="line"><span class="keyword">alias</span> <span class="title">grep</span>=<span class="string">"grep --color=auto"</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">html</span>=vi<span class="preprocessor">   # 在命令行直接输入后缀为 html 的文件名，会在 vim 中打开,如果想用TextMate打开可以将vi改成mate</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">rb</span>=vi<span class="preprocessor">     # 在命令行直接输入 ruby 文件，会在 vim 中打开</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">py</span>=vi<span class="preprocessor">       # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">js</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">c</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">java</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">txt</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">gz</span>=<span class="comment">'tar -xzvf'  #表示自动解压后缀为 gz 的压缩包。</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">tgz</span>=<span class="comment">'tar -xzvf'</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">zip</span>=<span class="comment">'unzip'</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">bz2</span>=<span class="comment">'tar -xjvf'</span></div></pre></td></tr></table></figure>

<p>也可以修改主题，默认主题是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ZSH_THEME</span>=<span class="string">”robbyrussell”</span></div></pre></td></tr></table></figure>

<h2 id="插件zsh">插件zsh</h2>
<p>在这里就说一个必装的插件。<br>autojump：zsh 和 autojump 的组合形成了 zsh 下最强悍的插件。<br>Mac安装可以使用brew</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> autojump</span></div></pre></td></tr></table></figure>

<p>注意，虽然是自动安装，但是可能因为权限问题，还需要自己手动在<code>.zshrc</code>里添加如下代<br>码,而且Mac跟linux的指令还不太一样，Mac的指令如下所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[ -s `brew --prefix`/etc/autojump.sh  ]]</span> && . `brew <span class="comment">--prefix`/etc/autojump.sh</span></div></pre></td></tr></table></figure>

<p>Linux安装的话需要先clone项目。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/joelthelion/autojump.git</div></pre></td></tr></table></figure>

<p>然后找到目录，执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./install.<span class="keyword">py</span></div></pre></td></tr></table></figure>

<p>最后需要自己手动在<code>.zshrc</code>里添加如下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[ -s ~/.autojump/etc/profile.d/autojump.sh  ]]</span> && .~/.autojump/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure>

<p>大功告成。<br>关于终端配色与vim配色，下次单开一章来写。</p>
]]></content>
    
    
      <category term="Vim" scheme="http://gengbiao.me/tags/Vim/"/>
    
      <category term="terminal" scheme="http://gengbiao.me/tags/terminal/"/>
    
      <category term="Mac" scheme="http://gengbiao.me/categories/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git 常见问题汇总]]></title>
    <link href="http://gengbiao.me/2014/09/22/git_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://gengbiao.me/2014/09/22/git_常见问题汇总/</id>
    <published>2014-09-21T16:00:00.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git_常见问题汇总">git 常见问题汇总</h1>
<h2 id="github_Contributions_Calendar不记录">github Contributions Calendar不记录</h2>
<p>一开始为了方便直接用ssh登陆了，结果github发现我push的账号email跟我的github上public的email不一样，果断悲剧了。就是calendar这个东西没有提交动态。。<br><img src="http://coney.qiniudn.com/git_calendar.png?attname=&amp;e=1412907149&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:Js1kVBGoxO6MwQgdtZixirfhzs8" alt="github_calendar"><br>于是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config <span class="literal">user</span>.email</div></pre></td></tr></table></figure>

<p>这个时候当然什么都没有，最开始登陆是直接ssh登陆的，没有config这些东西。<br>然后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> config user.email <span class="string">"username<span class="variable">@email</span>.com"</span></div></pre></td></tr></table></figure>

<p>搞定。</p>
<h2 id="github_add_的不同形式">github add 的不同形式</h2>
<p>git add命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。<br>基本上会用到下面的几个命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">git add xxx</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git add —all</td>
<td>第一次提交的时候需要使用git add —all,将数据初始化到索引库中。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add path</td>
<td>通过git add <path>的形式把我们<path>添加到索引库中，<path>可以是文件也可以是目录。git不仅能判断出<path>中，修改（不包括已删除）的文件，还能判断出新添的文件，并把它们的信息添加到索引库中。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add -u [<path>]</td>
<td>把<path>中所有tracked文件中被修改过或已删除文件的信息添加到索引库。它不会处理untracted的文件。省略<path>表示.,即当前目录。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add -A [<path>]</td>
<td>表示把<path>中所有tracked文件中被修改过或已删除文件和所有untracted的文件信息添加到索引库。省略<path>表示.,即当前目录。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add -i</td>
<td>通过git add -i [<path>]命令查看<path>中被所有修改过或已删除文件但没有提交的文件，并通过其revert子命令可以查看<path>中所有untracted的文件，同时进入一个子命令系统。（见下图）</td>
<td></td>
</tr>
</tbody>
</table>
<p><img src="http://coney.qiniudn.com/git_add_i.png?attname=&amp;e=1412906967&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:ZM2n0HhwbQYBVlD7WXZJhlhA84o" alt="git_add_i"></p>
]]></content>
    
    
      <category term="git" scheme="http://gengbiao.me/tags/git/"/>
    
      <category term="技术-Git" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF-Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蓝牙4.0，物联网时代的垫脚石]]></title>
    <link href="http://gengbiao.me/2014/09/15/%E8%93%9D%E7%89%994.0%EF%BC%8C%E7%89%A9%E8%81%94%E7%BD%91%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9E%AB%E8%84%9A%E7%9F%B3/"/>
    <id>http://gengbiao.me/2014/09/15/蓝牙4.0，物联网时代的垫脚石/</id>
    <published>2014-09-15T13:08:18.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="蓝牙4-0，物联网时代的垫脚石">蓝牙4.0，物联网时代的垫脚石</h1>
<p>最近工作需要用到蓝牙4.0，整理了一些信息，分享一下。<br>蓝牙 4.0 的标准早在 2010 年 7 月就已经发布，但真正应用于智能手机则是在 2011 年 9 月 iPhone 4S 发布之后。尽管随后 Galaxy S3、Galaxy Note 2 等一批支持蓝牙 4.0 的 Android 机型纷至沓来，但 Android 原生系统始终缺乏预设蓝牙框架，由于系统底层蓝牙驱动不同，开发者无法在不同品牌不同机型的 Android 手机上做一些蓝牙外设。<br>而在Android 4.3 的发布会上，google终于带来了 Bluetooth 4.0 Low Energy。这必将是一个物联网加速发展的大好时机。</p>
<h2 id="蓝牙4-0较之前有什么较重要的改进：">蓝牙4.0较之前有什么较重要的改进：</h2>
<table>
<thead>
<tr>
<th>技术规范</th>
<th>经典蓝牙（2.1 &amp;3.0）</th>
<th>低功耗蓝牙（4.0）</th>
</tr>
</thead>
<tbody>
<tr>
<td>无线电频率</td>
<td>2.4GHz</td>
<td>2.4GHz</td>
</tr>
<tr>
<td>距离</td>
<td>10米/100米</td>
<td>30米</td>
<td></td>
</tr>
<tr>
<td>数据速率</td>
<td>1-3Mbps</td>
<td>1Mbps</td>
<td></td>
</tr>
<tr>
<td>应用吞吐量</td>
<td>0.7-2.1Mbps</td>
<td>0.2Mbps</td>
<td></td>
</tr>
<tr>
<td>发送数据的总时间</td>
<td>100ms</td>
<td>&lt;6ms</td>
<td></td>
</tr>
<tr>
<td>耗电量</td>
<td>1</td>
<td>0.01至0.5</td>
<td></td>
</tr>
<tr>
<td>最大操作电流</td>
<td>&lt;30mA</td>
<td>&lt;15mA（最高运行时为15 mA）</td>
<td></td>
</tr>
<tr>
<td>主要用途</td>
<td>手机，游戏机，耳机，立体声音频流，汽车和PC等</td>
<td>手机，游戏机，PC，表，体育和健身，医疗保健，汽车，家用电子，自动化和工业等</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li><p>低能耗！</p>
<p>   蓝牙4.0可以用更低的功耗传输更远的距离，而且在待机状态（不使用）的情况下，耗电量几乎可以忽略不计，据称一颗纽扣电池就可以待机数年之久。注意，这里说的是 待机。<br>   在真正传输数据时耗电量并没有很大改观，但是在待机的时候大大降低了耗电量。</p>
</li>
<li><p>更长的传输距离！</p>
<p>  从蓝牙4.0的规范标准来看，其中有一点就是高达100米的传输距离，这在以前是不敢想象的.<br> 一般的蓝牙设备，也就是10米范围内，好一点的也不会超过20米的传输距离，在4.0之前，最高速度24Mbps的蓝牙技术高速规范提高了蓝牙设备的门槛，比如当初森海塞尔RS180无线耳机，作为一款2.4G设备竟然能有100米的传输距离令业界惊奇了好久。<br>但是相信4.0普及以后，轻轻松松就可以达到这个成绩。</p>
</li>
<li><p>其他的包括速度，延迟，安全方面的改进就不详细介绍了。</p>
<h2 id="蓝牙4-+必将助力物联网">蓝牙4.+必将助力物联网</h2>
<p>蓝牙4.1出来了。蓝牙4.1新技术全面解析：这次蓝牙4.1玩了回大的—IOT（物联网）。而为了实现这一点，迎合可穿戴和多设备连接，对通讯功能的改进（改善数据传输能力）成为4.1标准最重要的升级之一。听说5.0还要全面组网。</p>
<h2 id="关于开发">关于开发</h2>
<p>下图为蓝牙4.0的模块图<br><img src="http://coney.qiniudn.com/blog_ble4.0.png?attname=&amp;e=1412907149&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:1kFE0vBHkr4uEEs8xW41YmIEvK8" alt="bluetooth4.0"><br>根据模块图可以看出，蓝牙核心规范4.0的模块增加了以下几个蓝牙低功耗组件。</p>
</li>
</ul>
<ul>
<li>GATT表示服务器属性和客户端属性，描述了属性服务器中使用的服务层次，特点和属    性。BLE设备使用它作为蓝牙低功耗应用规范的服务发现。</li>
<li><p>ATT实现了属性客户端和服务器之间的点对点协议。ATT客户端给ATT服务器发送请命令。ATT服务器向ATT客户端发送回复和通知。</p>
</li>
<li><p>SMP用于生成对等协议的加密密钥和身份密钥。SMP管理加密密钥和身份密钥的存储，它通过生成和解析设备的地址来识别蓝牙设备。</p>
</li>
</ul>
<p>稍后写出demo来会继续分享。</p>
]]></content>
    
    
      <category term="物联网" scheme="http://gengbiao.me/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="蓝牙4.0" scheme="http://gengbiao.me/tags/%E8%93%9D%E7%89%994-0/"/>
    
      <category term="智能硬件" scheme="http://gengbiao.me/tags/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="技术-技术普及" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%99%AE%E5%8F%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[one rule，one place]]></title>
    <link href="http://gengbiao.me/2014/09/13/one_rule%EF%BC%8Cone_place/"/>
    <id>http://gengbiao.me/2014/09/13/one_rule，one_place/</id>
    <published>2014-09-13T13:08:18.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="one_rule，one_place">one rule，one place</h1>
<p>抽象类与接口紧密相关。然接口又比抽象类更抽象，这主要体现在它们的差别上：</p>
<ol>
<li><p>类可以实现无限个接口，但仅能从一个抽象（或任何其他类型）类继承，从抽象类派生的类仍可实现接口，从而得出接口是用来解          决多重继承问题的。</p>
</li>
<li><p>抽象类当中可以存在非抽象的方法，可接口不能且它里面的方法只是一个声名必须用public来修饰没有具体实现的方法。</p>
</li>
<li><p>抽象类中的成员变量可以被不同的修饰符来修饰，可接口中的成员变量默认的都是静态常量（static fainl）。</p>
</li>
<li><p>这一点也是最重要的一点本质的一点”抽象类是对象的抽象，然接口是一种行为规范”。</p>
</li>
</ol>
<ol>
<li>接口是公开(public)的，里面不能有私有的方法或变量,是用于让别人使用的,实现接口的一定要实现接口里定义的所有方法。<br>而抽象类是可以有私有方法或私有变量的，实现抽象类可以有选择地重写需要用到的方法，但是必须实现里面所有的抽象方法。</li>
<li>抽象类在 Java 语言中表示的是一种继承关系，一个类只能使用一次继承关系。<br>但是，一个类却可以实现多个interface(java中实现多重继承的方法之一)。</li>
<li>抽象类中可以有自己的数据成员，也可以有非abstarct的成员方法。<br>而在接口中，只能够有静态的不能被修改的数据成员（也就是必须是 static final的，不过在 interface中一般不定义数据成员），而且所有的成员方法都是抽象的。</li>
<li>抽象类和接口所反映出的设计理念不同。<br> 其实abstract class表示的是”is-a”关系，interface表示的是”like-a”关系。（组合是”has a”关系）</li>
<li>接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值。<br>抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。</li>
</ol>
<p>一般的应用里，最顶级的是接口，然后是抽象类实现接口，最后才到具体类实现。不是很建议具体类直接实现接口的。还有一种设计模式是面向接口编程，而非面向实现编程。</p>
<p>其实接口是抽象类的延伸，可以将它看做是纯粹的抽象类，就是说接口比抽象类还抽象，还有设计接口的目的就是为了实现C++中的多重继承，不过java团队设计的一样更有趣的东西来实现这个功能，那就是内部类(inner class)。<br>在下一篇中叙述这部分。</p>
]]></content>
    
    
      <category term="java" scheme="http://gengbiao.me/tags/java/"/>
    
      <category term="技术" scheme="http://gengbiao.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术-java" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF-java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些花儿]]></title>
    <link href="http://gengbiao.me/2014/09/05/%E9%82%A3%E4%BA%9B%E8%8A%B1%E5%84%BF/"/>
    <id>http://gengbiao.me/2014/09/05/那些花儿/</id>
    <published>2014-09-04T16:00:00.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<p>五：</p>
<p>桃之夭夭花正研，思美人兮，彻夜无眠。</p>
<p>云瑶站在高阁之上，望着远处的一片粉红色开心的说，山里的桃花开了。</p>
<p>是啊，桃花开了，在这三月将逝的时节。</p>
<p>“我要去亲戚家里待几天，等我回来了去踏青吧。就午己那天怎么样？”云瑶一脸期待的表情。</p>
<p>“好啊。”阿牛很开心的答应道。</p>
<p>今天是午乙，离午己还有四天，一想到也许四天以后才能再看到云瑶，阿牛心里又有一点失落。</p>
<p>世界总是这么神奇吧，总会在不知名的时间与不知名的地点里，会有一个不知名却好像命中注定一样的她出现在你眼前，然后？</p>
<p>然后每次有她的地方，你整个人就傻掉了，可是没有她的地方，却已经变得不习惯了。</p>
<p>据说这样的人，每个人生命中只有一个，而且很多人穷极一生都不一定能遇到。</p>
<p>阿牛觉得，自己遇到了。</p>
<p>云瑶，昨天晚上，我托一只蜘蛛跟你说，叫它告诉你，我很想念你，你知不知道。 </p>
<p>六：</p>
<p>午己日至，乌云密布。</p>
<p>云瑶如期而归。</p>
<p>天空飘来了大朵大朵的乌云，像洒了一天空的墨，下一刻全世界的重量就会压上去，然后天空破裂成无数片肆无忌惮的砸向人间，碾碎着朝向这些蝼蚁般的世人。</p>
<p>在这么个鬼天气下，古镇里的人们也很难高兴起来。</p>
<p>当然，阿牛是个例外。</p>
<p>阿牛早早的从床上爬起来，兴冲冲地来到镇外长亭中等待，无论是漫天的乌云还是随时都可能砸向人间的瓢泼大雨，都无法影响他的心情。</p>
<p>是啊，马上就要见到云瑶了，又如何能够不欢喜？</p>
<p>芳草萋萋，青木离离，即见伊人，云胡不喜。</p>
<p>胡不喜？不归不喜。</p>
<p>既然伊人已经归来，自然没有理由不欢喜。</p>
<p>可是云瑶却没有这么开心了。任谁看今天的踏青也肯定泡汤了。无法沐浴在桃花源里赏桃花，已经够让人扫兴了，眼前还只有一个不会安慰人，360度全是死角，怎么看都傻乎乎的阿牛，更是让人平添一丝抑郁。</p>
<p>“你个木头，傻笑什么，没看到这鬼天气不适合踏青么？”云瑶一看见他就来气。</p>
<p>可阿牛还是不自知的在笑，就算看到云瑶生气了也不知道为什么，更妄谈安慰了。</p>
<p>“回家回家！”</p>
<p>“那我们明天再来好不好？”</p>
<p>“不好，明天要在家学女红！”</p>
<p>“那后天呢？”</p>
<p>“不好，后天要跟着后街的休宁学纺织!”</p>
<p>“那，再等一天呢？”</p>
<p> “不好不好不好，不是今天就通通不好！”</p>
<p>每次云瑶发脾气，阿牛就只能束手无策地跟在后面，完全说不出话来。</p>
<p>  有女同行，颜如舜英。将翱将翔，佩玉将将。</p>
<p>  有伴在旁，呆木无享。且行且语，言不达意。</p>
<p>于是，一天就在乌云中度过了。</p>
<p>  若干年以后阿牛才知道，有一种东西叫做女孩子的心，如果你不在乎的话，任她千番变化也只是视作无物；而当你在乎的时候，她就变成了世界上最难懂的东西。</p>
<p> 而成长，大部分情况下，是跟不上生活的，于是我们总是在经历过后，才懂得了成长。</p>
<p>七：</p>
<p>  彼时，边疆正乱，外敌入侵，吐蕃在经过近十年休整后，再一次挥师南下，骑兵践踏之处民不聊生，百姓人心惶惶，纷纷往关内逃亡。</p>
]]></content>
    
    
      <category term="小说" scheme="http://gengbiao.me/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="小说-世界上最美的十大谎言" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4-%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E7%BE%8E%E7%9A%84%E5%8D%81%E5%A4%A7%E8%B0%8E%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ThinkPHP学习总结]]></title>
    <link href="http://gengbiao.me/2014/09/05/ThinkPHP%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://gengbiao.me/2014/09/05/ThinkPHP入门总结/</id>
    <published>2014-09-04T16:00:00.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ThinkPHP学习总结">ThinkPHP学习总结</h1>
<p>最近工作需要，要用PHP写目前项目的后台，因为之前一行PHP代码都没写过，只能从头开始读代码，找了个框架，thinkPHP，现将从零开始学习的心得分享如下。</p>
<p>thinkPHP框架概况</p>
<pre><code>├─ThinkPHP.php     框架入口文件
├─Common 框架公共文件
├─Conf 框架配置文件
├─Extend 框架扩展目录
├─Lang 核心语言包目录
├─Library 核心类库目录
│  ├─Behavior 核心行为类库
│  ├─Core 核心基类库
│  ├─Driver 内置驱动
│  │  ├─Cache 内置缓存驱动
│  │  ├─Db 内置数据库驱动
│  │  ├─TagLib 内置标签驱动
│  │  └─<span class="keyword">Template</span> 内置模板引擎驱动
│  └─<span class="keyword">Template</span> 内置模板引擎
└─Tpl 系统模板目录
</code></pre><p>基于thinkPHP做二次开发的时候主要使用的<code>Library</code>目录下<code>Driver</code>的东西。也有可能使用<code>Template</code>,写到<code>/Taglib</code>里面，定义自己的模板类。利与开发。</p>
<h4 id="比如想写一个formrow，如果直接使用html写的话，写法如下：">比如想写一个formrow，如果直接使用html写的话，写法如下：</h4>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"formitm"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"lab"</span>&gt;</span>title<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ipt"</span>&gt;</span>content<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"help-block"</span>&gt;</span>tip<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><h4 id="采用模板写法如下：">采用模板写法如下：</h4>
<p>新建一个文件MyTpl.class.php</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_formrow</span><span class="params">(<span class="variable">$tag</span>,<span class="variable">$content</span>)</span> </span>{
    <span class="variable">$title</span>      = <span class="variable">$tag</span>[<span class="string">'title'</span>];                <span class="comment">//标题</span>
    <span class="variable">$tip</span>      = <span class="variable">$tag</span>[<span class="string">'tip'</span>];                <span class="comment">//提示信息</span>
    <span class="variable">$html</span> = <span class="string">'
    &lt;div class="formitm"&gt;
        &lt;label class="lab"&gt;'</span>.<span class="variable">$title</span>.<span class="string">'&lt;/label&gt;
        &lt;div class="ipt"&gt;
            '</span>.<span class="variable">$content</span>.<span class="string">'
            &lt;p class="help-block"&gt;'</span>.<span class="variable">$tip</span>.<span class="string">'&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;'</span>;
    <span class="keyword">return</span> <span class="variable">$html</span>;
}
</code></pre><p>以后可以直接使用下面的字段达到上面的效果。</p>
<pre><code><span class="tag">&lt;<span class="title">MyTpl:formrow</span> <span class="attribute">title</span>=<span class="value">""</span> <span class="attribute">tip</span>=<span class="value">""</span> &gt;</span><span class="tag">&lt;/<span class="title">admin:formrow</span>&gt;</span>
</code></pre><p>本质是一个映射的思想。使程序结构更清晰，代码更简洁统一。</p>
<p>以实例叙述，Demo如下：<br>   首先你创建新的文件夹应该包含如下几个文件夹：</p>
<pre><code>├─View        表示层
├─Controller  控制层  <span class="operator"><span class="keyword">use</span> Think\Controller
├─Model       数据层  <span class="keyword">use</span> Think\Model
├─Conf        配置文件
├─<span class="keyword">index</span>.html  默认的入口<span class="keyword">index</span>.html文件
├─Common      非必要，但是可以将公用的文件放到这里面</span>
</code></pre><h3 id="View层包含的为html代码，并可以直接使用已存在的模板。">View层包含的为html代码，并可以直接使用已存在的模板。</h3>
<ul>
<li>需要提交的数据直接写在form表单里面，action后写接收响应的Controller,使用方法<code>U</code>定位地址。比如<code>{:U()}</code>指提交到了本地，<code>{:U(“admin/getInfo”)}</code>就是提交到admin文件里的getInfo方法。</li>
<li>值得注意的是，在这里不需要写Controller，是因为U方法会自动解析，直接定位到adminController方法中去，所以真正的物理文件命名不应该是admin，而是adminController，</li>
<li>关于View层其他的不再过多叙述。<br>Controller层为逻辑控制层，负责MV之间的沟通。<br>Modle层是数据持久层。<br>MVC模式在ThinkPHP中的数据交互主要通过<code>_POST</code> <code>Request</code>，鉴于PHP中前端的_POST请求可以在任何地方被捕捉到。所以MVC通信过程中只需要调用方法，不需要传递数据。</li>
</ul>
<hr>
<hr>
<h3 id="Controller层和Model包含的为php代码。">Controller层和Model包含的为php代码。</h3>
<ul>
<li>Controller层主要是对方法的调用，包含了大量的工程中绝大部分的逻辑代码。当调用Model时使用使用方法<code>M</code>定位地址。具体用法与上文<code>U</code>类似。</li>
<li><p>Model层不需要编写真正的sql语句，CURD都已经封装的很完备。用如下语句进行举例。</p>
<pre><code>  $<span class="keyword">this</span>-&gt;table<span class="function"><span class="params">(<span class="string">"__CONTENT__ as A"</span>)</span>
              -&gt;</span>join<span class="function"><span class="params">(<span class="string">'__CONTENT_ARTICLE__ as B ON A.content_id = B.content_id'</span>)</span>
              -&gt;</span>join<span class="function"><span class="params">(<span class="string">'__CATEGORY__ as C ON A.class_id = C.class_id'</span>)</span>
              -&gt;</span>where<span class="function"><span class="params">($where)</span>
              -&gt;</span>order<span class="function"><span class="params">($order)</span>
              -&gt;</span>count();
</code></pre><p>选定table，thinkPHP的格式为<code>_table名称_</code>,如 <code>table(&quot;__CONTENT__ as A&quot;)</code>即选择了数据库中名为CONTENT的table。可以根据自己喜好添加where，order等语句，不添加默认为空。</p>
<p><strong>需要注意的是</strong> ThinkPHP在执行table以后，关于CURD的操作就缺省针对于之前的那个table，不再重新选择。而且如果不做映射处理的话，默认<code>_POST</code>里的字段名与table中的字段名是相同的，即KEY-VALUE在<code>table</code>中和<code>_POST</code>中是一致的。</p>
<p>关于这部分，剩下的不再叙述。</p>
<h3 id="ThinkPHP新手，尤其是没有学过PHP的新手容易疑惑的几个地方：">ThinkPHP新手，尤其是没有学过PHP的新手容易疑惑的几个地方：</h3>
<blockquote>
<p>数据去哪了?如何获取到的数据？</p>
</blockquote>
<pre><code>  首先，在PHP中_POST请求可以在后台的任何地方接收到，action只是选定了提交form表单后执行哪个类，并非把数据提到到了这个类里面，其他类不可以使用。
  其次，在thinkPHP的MVC层中，如果不做自定义的映射处理，默认前台form中的{name,<span class="keyword">value</span>}直接对应数据库中table的{key,<span class="keyword">value</span>}。所以在数据form激发action的时候就数据已经送达到了后台的每一个地方，无论Controller还是Model都可以使用。
</code></pre><blockquote>
<p>thinkPHP伪静态的具体效果，如何根据url解析到目的地址？</p>
</blockquote>
<pre><code>  thinkPHP采用了伪静态效果，伪静态有利于搜索引擎的收录,能够增加网站的优化效果。而且跟人觉得用户友好度较好。    至于如何根据url解析到正确的目的地址，以如下代码示例。
  比如url：http:<span class="comment">//serverName/index.php/Blog/read/，就定位到Blog这个文件下read方法了。</span>
  比如方法如下：
      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(<span class="variable">$id</span>=<span class="number">0</span>)</span></span>{
          <span class="keyword">echo</span> <span class="string">'id='</span>.<span class="variable">$id</span>;
       }
   则访问后会显示<span class="number">0.</span>
</code></pre><p><strong>值得注意的地方是</strong><code>read($id=0)</code>里面给id一个缺省值，如果没有这个缺省值，则访问时会报错。如果在<code>/read/</code>后加参数，比如<code>http://serverName/index.php/Blog/read/5</code>,则显示5.</p>
<p>   其实也可以开启路由功能，自定义url解析规则，自己定义url的写法。这里不详细展开。</p>
</li>
</ul>
]]></content>
    
    
      <category term="php" scheme="http://gengbiao.me/tags/php/"/>
    
      <category term="技术-PHP" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF-PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[柳絮飞]]></title>
    <link href="http://gengbiao.me/2014/08/31/%E6%9F%B3%E7%B5%AE%E9%A3%9E/"/>
    <id>http://gengbiao.me/2014/08/31/柳絮飞/</id>
    <published>2014-08-30T16:00:00.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<p>一：<br>        “我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我，我猜中了前头，可是我猜不着这结局……”</p>
<p>   这是一个流传了几百年的故事，谁也不知道是真是假，就这么流传了几百年，被古镇坊间和茶社的说书先生讲过了不知道多少遍。</p>
<p>   当说书先生已经近乎程式化的又讲到这个故事结尾的时候，云瑶已经拽着自己的小袖口哭的稀里糊涂的了。当然，这绝对不是程式化的。</p>
<p>   虽然她听了不止一遍了。</p>
<p>   虽然她哭了不止一遍了。</p>
<p>   虽然她平时就很爱哭。</p>
<p>   但是之所以还会哭，是因为一种叫做感动与向往的东西存在着，并不断作祟着她单纯幼稚的心灵。</p>
<p>   每到这个时候，都会有一个递上手帕的人。云瑶也总是习惯性的接过来擦拭眼泪与鼻涕，然后擦完了习惯性的还回去。</p>
<p>   递手帕的那个人叫做阿牛。阿牛是这个小镇里普通的一个男孩子。普通到丢进人群里就再也找不到了。所以在云瑶眼里，阿牛也只是一个递手帕的人。 </p>
<p>   “诶，你是？”在不知道第多少次还回手帕的时候云瑶终于发现了一个问题，好像每次他都会出现在自己身边，而自己还不认识他。</p>
<p>   “我，我吗？”阿牛好像被这突如其来的问题问住了，“我叫。。”</p>
<p>   “诶，怎么吞吞吐吐的，你连自己的名字都不知道么？”</p>
<p>   “额，那个，我叫阿牛。”</p>
<p>   “什么这个那个的，阿牛，好奇怪的名字；你好，我叫云瑶。”云瑶很自然的伸出了自己的手。</p>
<p>   不知道为什么，阿牛下意识的往后退了一步，脑子一片空白，并没有把手递过去，而是紧张的用手挠了挠头，傻傻的样子。</p>
<p>   不管如何，两个好像一直没有联系却又好像一直在联系的人，就这么认识了。</p>
<p>二：<br>   阿牛记得，认识云瑶的那天，阳光洒在身上，暖暖的。从那天起，古镇的空气里好像多了一种不可言喻的味道，甜甜的。自己的心里好像多了一种奇妙的感觉，融入到血液里，然后流淌到了身体的每一个角落。</p>
<p>   当然，这些都是在没有看到云瑶时发生的事情，如果云瑶一出现，阿牛就会脑子一片空白的短时间大脑休克，至于接下来会发生什么，全靠下意识动作了。于是就会经常出现一些囧人的事情。</p>
<p>   “哦，哦，原来是这样啊。”</p>
<p>   “是，是么？我以前不知道的。”</p>
<p>   “对，对的，是这样的。”</p>
<p>   “额，额``原来你是开玩笑啊，我当真了。”</p>
<p>   当然，云瑶没有注意到这些事情，在云瑶的眼里，阿牛本来就是这样，傻乎乎的，挺可爱。</p>
<p>   说书先生说，每个人的生命中都会遇见一个紫霞仙子，就像天宫的仙女掉落到了凡尘，别人都发现不了，只有你自己可以看到她背后的光。</p>
<p>   阿牛本来是不信这些的，直到有一次他看到了角落里正哭的一塌糊涂的云瑶，还有她背后的光。</p>
<p>  绿兮衣兮，绿衣黄里，心之向兮，不知何故。<br>  绿兮衣兮，绿衣黄里，心之慕兮，不知何语。</p>
<p>三：<br>   烟花三月，柳絮纷飞。</p>
<p>   云瑶说她喜欢柳絮，喜欢买上一串街角弄堂供不应求的糖葫芦，站在古镇的高楼上远眺。</p>
<p>   “柳絮凭风起，伊人无所依。”站在高阁上的云瑶顿时觉得豪情万丈，脱口而出。</p>
<p>   “恩，云瑶选的这个地方不错，太低了柳絮飞起来会沾到糖葫芦上的。”阿牛好像完全没有听到云瑶的话，只是默默地看着吃糖葫芦的云瑶随意说了这句话，傻傻的笑着。</p>
<p>   “哎呀，会不会说话，这么美的意境全让你给弄没了，真是的。”云瑶跺了跺脚，不开心了。</p>
<p>   “额，额~我就是想夸你会挑地方。”阿牛的脸又囧的通红。</p>
<p>   “有你这么夸人的么？你不说话也就算了，你要是说话明明应该接下面两句诗才对啊。”云瑶气鼓鼓的小脸也变得通红，不过是在生气而已。</p>
<p>   “好啦好啦，我下次注意，我再去给你买糖葫芦吃。”每次碰到这种情况，阿牛只知道买好吃的哄哄云瑶。</p>
<p>   “这次原谅你，下不为例。”云瑶一听到好吃的，顿时变得开心了不少，跟个小公主似的大度的放过了他。<br>   “柳絮随风起，伊人无所依。”对啊，这只是两句诗，后面还至少应该再有两句的，自己当时怎么没有反应过来呢。阿牛事后想到这件事的时候变得很懊恼，而这样的事情，发生了也不止一次了。</p>
<p>  柳絮随风起，伊人无所依；<br>  高阁婷婷立，静待良人兮。</p>
<p>   后面这两句，云瑶看了看旁边的阿牛，想了想没有说出口。</p>
<p>四：<br>  我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我。</p>
<p>  云瑶又想起了这句话，可是她看到了阿牛，无论如何也看不到一点盖世英雄的气息。</p>
<p>  可是有他在身边的时候，又会觉得很踏实吧。 </p>
<p>  那是一种依赖，可是却总感觉少了一点什么。</p>
<p>  或许是，少了恋爱的感觉吧。</p>
<p>  每个人的生命中都会遇见一个紫霞仙子，就像天宫的仙女掉落到了凡尘，别人都发现不了，只有你自己可以看到她背后的光。</p>
<p>  阿牛又想起了这句话，然后他又想起了云瑶，那个在他眼里如仙女一般的女孩子。</p>
<p>  两个人站在了高阁之上。</p>
<p>  “柳絮飞起来的样子确实很漂亮。”</p>
<p>  “是啊，不过不是每天都会这样的。”</p>
<p>  “为什么？”</p>
<p>  “因为，有风啊。”云瑶回过头说道。</p>
<p>  画面定格在那一刻，</p>
<p>  回眸一笑百媚生。</p>
<p>未完待续。</p>
]]></content>
    
    
      <category term="小说" scheme="http://gengbiao.me/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="小说-世界上最美的十大谎言" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4-%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E7%BE%8E%E7%9A%84%E5%8D%81%E5%A4%A7%E8%B0%8E%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[题目？没题目（之未完待续第一篇）]]></title>
    <link href="http://gengbiao.me/2010/12/26/%E9%A2%98%E7%9B%AE%EF%BC%9F%E6%B2%A1%E9%A2%98%E7%9B%AE(%E4%B9%8B%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD%E7%AC%AC%E4%B8%80%E7%AF%87)/"/>
    <id>http://gengbiao.me/2010/12/26/题目？没题目(之未完待续第一篇)/</id>
    <published>2010-12-26T11:23:00.000Z</published>
    <updated>2014-10-20T08:08:33.000Z</updated>
    <content type="html"><![CDATA[<p>上次到哪了~额,我去看看。额，上次到起名字那了。</p>
<p>没错，西门蚊子是他叔叔，我再重申一次。</p>
<p>于是他爸爸开始翻箱倒柜，找一切可以起名字的东西。额~~椅子，不行了，这是他爷爷的爷爷；杯子，也不能用，这是他爷爷的爷爷的爸爸；就这样找了一上午，唯一的收获就是把家谱背了一遍。</p>
<p>西门蝇子终于累了，他坐在一张椅子上发呆，遥想着未来……若干年以后……</p>
<p>吃饭的时候，他指着筷子对儿子说：这是你祖爷爷的祖爷爷的祖爷爷。</p>
<p>睡觉的时候，他指着被子对儿子说：这是你祖爷爷的祖爷爷的祖爷爷的祖爷爷。</p>
<p>洗漱的时候，他指着梳子对儿子说：这是你祖爷爷的祖爷爷。</p>
<p>想着想着，他幸福的笑了，毕竟自己现在是个做爸爸的人了呢。</p>
<p>啪！他突然被孩子他妈打苍蝇的声音惊醒。于是很悲催的想到：</p>
<p>打扫卫生的时候，他指着一个死苍蝇对儿子说：这是你爸爸……%￥#@</p>
<p>一想到这，西门蝇子突然下定了一个决心，以后打扫卫生的时候只打蚊子。然后指着一个死蚊子对儿子说：这是你叔叔。</p>
<p>~嘎~嘎~嘎~想到这，西门蝇子幸福的笑了。</p>
<p>可是，可是，儿子还没名字呢~~一想到这，西门蝇子的心顿时又低沉了下来。越想越沮丧，于是便四处去逛逛，不知道是肚子的问题，还是鼻子的问题，反正是走到厨房了，然后看见了孩子他妈，然后灵机一动，以前都是实体的，为什么不能来个抽象派的？</p>
<p>于是，鬼都不知道为什么，他有名字了，叫西门厨子。</p>
<p>话说，其实厨子一点也不会做饭。</p>
<p>那时候还没有小学，人人都往少林寺跑，跑不进去的就在家里种地。而西门家比较特别，因为他祖父资质好，在少林寺习武；他爷爷资质很差，在家种地；可是到了他爸爸这，资质不好不差，进了少林寺就成了武僧里面种地种的最好的，回家种地就成了老百姓里面武功最好的。这可把主持愁坏了，最后折衷了一下，于是他爸爸就成了在少林寺后山上种地的，其实~~还是个种地的。</p>
<p>这就导致了厨子爸爸的极度失落，下决心要把厨子送进少林寺，于是天天对他进行魔鬼训练，如果不及格了就罚跪搓板。而厨子本人<del>怎么说呢，最后练就了一身跪搓板的好功夫</del>~</p>
<p>转眼间厨子已经5岁了。厨爸眼看着刀枪棒棍什么都没学会，就学会跪搓板了，被逼无奈，让他到少林寺门口跪了三天三夜，吓得来上香的那几天都没敢上山。主持眼瞅着生意一落千丈，咬了咬牙，答应出道题，如果厨子能答下来，就收下他。</p>
<p>面试那天，（姑且叫面试吧）厨子还跪在原地，主持拿了个标着南北的小盒子给他，问他里面有什么东西。</p>
<p>这可把厨子爸爸愁坏了，他什么都没学会，哪里知道只是我国古代的四大发明之一罗盘呢？一看还缺一个勺子嘛~~当时蝇子先生真后悔当初没叫他西门勺子。</p>
<p>厨子瞅了老半天，看了看上面就写了个南北，心里想：东西北南，不对，东北西南，也不对，哎呀，反正只标着南北，没有标东西是谁也能看出来的啊。</p>
<p>于是厨子指着盒子上面，讪讪的问了一句：白胡子爷爷（他是不是看成圣诞老人了），这咋没东西？</p>
<p>主持得意的笑了笑：“这是罗盘，这里面是有勺子的”。边说边打开，一看，空的。</p>
<p>其实，里面确实有个勺子，可是前几天响应朝廷，建设有特色主义的少林寺，开始了大扫除，勺子被拿去后勤处清洗了。作为一个没有干的洗具，暂时没放回来。</p>
<p>蝇子先生由悲转喜，惊叹：人生的成败，有时候就是一个洗具啊！<br>就这样，厨子稀里糊涂的进入了少林寺。</p>
<p>进少林寺首先就是法号嘛，于是西门厨子这个名字暂时告一段落，当时厨子去要法号的时候正好赶上师傅正在下棋，随手一瞅，就叫卒子吧。</p>
<p>于是厨子有了一个新名字，全称西门卒子，法号卒子。</p>
<p>再后来呢？因为大多数都是一个村里来少林的，认识他的人就叫他厨子；不认识他的人就叫他卒子。久而久之，人们叫混了，就叫他厨卒子。</p>
]]></content>
    
    
      <category term="小说" scheme="http://gengbiao.me/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="小说-你好，旧时光" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4-%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%97%A7%E6%97%B6%E5%85%89/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[题目？没题目。。。]]></title>
    <link href="http://gengbiao.me/2010/12/25/%E9%A2%98%E7%9B%AE%EF%BC%9F%E6%B2%A1%E9%A2%98%E7%9B%AE%E3%80%82%E3%80%82%E3%80%82/"/>
    <id>http://gengbiao.me/2010/12/25/题目？没题目。。。/</id>
    <published>2010-12-24T17:20:00.000Z</published>
    <updated>2014-10-21T07:34:36.000Z</updated>
    <content type="html"><![CDATA[<p>突然想写点东西~~</p>
<p>题目？没题目。。。</p>
<p>从哪开始写呢~等我看看字典~~</p>
<p>擦，没汉语的，那我找本英语的凑活凑活吧，呼~~我先吹吹土。</p>
<p>好的，翻到了1108页，额~今天人品有点差~没褒义词，换个。</p>
<p>好的，1002页第一个单词，lessor，出租人。好吧，就从这来。</p>
<p>写现代的古代的呢？</p>
<p>好的，一直写现代诗了，改变下，写古代的。计时开始：00点20分</p>
<p>（一）还是照样没题目，呱<del>呱</del>·呱~~懒的想了。</p>
<p>他出生在一个北风呼啸的夜晚。据说，那天晚上抬头看不见太阳~~</p>
<p>他一生下来，就不知道自己叫什么，刚出生的时候，也没见过他父母的样子。因为他睁开眼就看见一大堆男男女女，他实在不知道谁是他爸。</p>
<p>就这样过去了很长时间，直到他开始学会说话，他才听见他妈妈说：</p>
<p>“孩子他爸，也该给孩子起个名字了。”</p>
<p>于是，他终于知道了自己的名字。</p>
<p>在这里，就不得不谈谈他的家族了。他们祖宗几十代一直都是文盲，名字也都是看见什么就起什么。据说他的祖爷爷的祖爷爷的祖爷爷的祖爷爷想给自己起名字的时候是对着他房子的大门思考的，而那个大门朝西，于是他的祖爷爷的祖爷爷的祖爷爷的祖爷爷就给自己起了个朝西门，可是后来老感觉到别扭，就改成了西门朝，并给他的儿子起名叫西门朝子。于是祖祖辈辈都延续着他的祖爷爷的祖爷爷的祖爷爷的祖爷爷的伟大发明，但是后来不知道到了第几代，出现了这么一个情况：当人们想找西门家族的人的时候，光名字就要喊半天</p>
<p>“西门朝子子子子子子子子子子子子子子子，你妈妈叫你回家吃饭。”</p>
<p>没准赶上哪个口吃的多喊了几个子，就把他孙子或者孙子的孙子叫去了。</p>
<p>或者遇上个数不清数的少喊了几个子，就喊成他爷爷了。</p>
<p>后来人们就边喊边数手指头，再后来人们就边喊边数手指头跟脚指头。再后来就没人敢喊他们了~~~</p>
<p>于是族长为了本族的利益，召开了全族的紧急会议，研究这个只能喊到20个子的算数问题。</p>
<p>有的人说可以让他们先找那个人爷爷的爷爷的爷爷，再让他爷爷的爷爷的爷爷找他爷爷的爷爷……</p>
<p>有的人说可以让他们倒着找嘛，先找辈分最小的，然后再找他爷爷的爷爷的爷爷的爸爸……</p>
<p>正当族长眉头紧锁的时候，有个人站起来说：可以发明一种算法。进行计算。</p>
<p>族长欣慰的点了点头。</p>
<p>具体做法是：每个人在脖子上挂一盘蒜，手里拿着一个盘子，每数满两个手的十根手指，就往盘子里放一瓣蒜。这样就可以准确找到自己要找的人的名字后面到底有几个子了。</p>
<p>于是西门家族的第二项发明出现了（第一项发明是名字），发明的那个人叫它“蒜盘”。</p>
<p>可是这样也有很多问题啊，</p>
<p>比如说谁老出门端着个盘子啊？</p>
<p>比如说谁老出门在自己脖子上挂盘蒜啊？</p>
<p>比如说要是有个人有11根手指头呢？</p>
<p>于是用了没多长时间，这个提议就作废了。</p>
<p>后来经过集思广益，决定保留西门和子在名字的最前面和最后面，再另行添加一个字在中间。</p>
<p>于是就有了西门柜子，西门筷子，西门勺子，西门梳子等等祖祖辈辈的名字，更由此产生了一个庞大的家族，他们有一个家喻户晓的名字：西门子。</p>
<p>因为传到他爸这代已经实在不知道是第几代了。能用的名字基本上都用完了。他爸这代也只是正好赶上环境污染比较严重，苍蝇满天飞的大环境，勉强混了个名字：西门蝇子。这时候可能有的读者会奇怪，他不是还可以叫西门蚊子吗？哦，想到这个问题的人很聪明，忘记说了，~~那是他叔叔。</p>
<p>晕了，笔记本没电了，未完待续。</p>
]]></content>
    
    
      <category term="小说" scheme="http://gengbiao.me/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="小说-你好，旧时光" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4-%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%97%A7%E6%97%B6%E5%85%89/"/>
    
  </entry>
  
</feed>
