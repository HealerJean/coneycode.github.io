<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[coney]]></title>
  <subtitle><![CDATA[有些事情,再不去做就忘了.有些人,再不去找就没了.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://gengbiao.me/"/>
  <updated>2015-04-10T12:09:44.886Z</updated>
  <id>http://gengbiao.me/</id>
  
  <author>
    <name><![CDATA[coney]]></name>
    <email><![CDATA[i@gengbiao.me]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[江洋大盗阿蜜蜜(三)]]></title>
    <link href="http://gengbiao.me/novel/%E6%B1%9F%E6%B4%8B%E5%A4%A7%E7%9B%97%E9%98%BF%E8%9C%9C%E8%9C%9C3/"/>
    <id>http://gengbiao.me/novel/江洋大盗阿蜜蜜3/</id>
    <published>2014-12-04T16:00:00.000Z</published>
    <updated>2015-03-24T04:14:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="江洋大盗阿蜜蜜（三）">江洋大盗阿蜜蜜（三）</h1>
<h2 id="肤白貌美两尺腰">肤白貌美两尺腰</h2>
<p>阿蜜蜜说，自己要做一个温柔如水的女子。</p>
<p>当然，是在干掉这个拆自己家大门的家伙以后。于是阿蜜蜜义无反顾地撸着袖子就冲了上去。</p>
<p>空气中充满了氮气，氧气，还有杀气。</p>
<p>仿佛感受到了背后的凉风，正在拆大门的人停下了手边的动作，依旧背对着阿蜜蜜，头也不回地迅速蹲下去。</p>
<p>与此同时，一只鞋子从他的上空飘了过去。</p>
<p>见到对方竟然躲过了自己蓄势一击，蜜蜜停下了脚步，表情凝重地望着对方。心里飞快地计算了一下。</p>
<p>“从发现异常到现在，我用了一弹指的时间扫视屋内，发现被搬得穷途四壁，又用了一弹指的时间提鞋出门发现了鸟巢被偷，下一个弹指就把鞋子扔了出去，这已经是老娘的极限了，就这样竟然都被躲开了。能有这么强烈的危险感并立刻做出反应的人，必然经过了多年的训练,能练出如此伸手的人，非官即盗。”</p>
<p>“难道？是同道中人？”</p>
<p>蜜蜜一边思考，一边把另一只鞋甩了出去。</p>
<p>“啪！”</p>
<p>正中了刚要站起来的那个人。</p>
<p>蜜蜜心满意足地拍了拍手，心想果然是自己技高一筹。</p>
<p>关于接下来如何对付这个胆大包天的小毛贼，数十种方案已经在蜜蜜的脑海中飞快地略过。</p>
<p>于是蜜蜜嘿嘿嘿嘿地一笑，转身拿起了旁边的鸡毛掸子。</p>
<p>这时候才看清了来人的样子。只见对方身高八尺有余，此时还穿着夜行衣，紧身的黑色衣着凸显着不俗地身材，竟然隐隐给人一丝帅气的感觉。</p>
<p>“肤白貌美两尺腰？”蜜蜜愣在那，脑子里闪过了这个词。</p>
<h2 id="洛城无敌温柔蜜蜜桑">洛城无敌温柔蜜蜜桑</h2>
<p>难道还是个颜值蛮高的盗贼？蜜蜜又陷入了深深地思考之中，完全把自己大门被拆的事情忘记了。</p>
<p>蜜蜜又想起了自己是一名温柔的女子。</p>
<p>于是蜜蜜赤脚走上前去，犹豫了很久，还是举起了手里的鸡毛掸子。</p>
<p>“一不小心甩了只鞋，弄脏你衣服了吧。”蜜蜜一边说一边用鸡毛掸子把他拍打身上的土。</p>
<p>这边做了亏心事，正打算转身撒丫子跑掉的黑衣人听到这句话，一时半会没有反应过来，就好像一位饱受了委屈的小孩子抓住了对方的把柄，揉了揉后脑勺。</p>
<p>相顾无言。</p>
<p>“喂，你先把背上的大门放下吧，”这次还是阿蜜蜜打破了僵局。可是说完后她总觉得哪里不太对，又补了一句，“多累啊。”</p>
<p>这才够温柔嘛，阿蜜蜜心满意足地看着对面的人。</p>
<p>五分钟后，阿蜜蜜的屋子里传来蜜蜜爽朗的笑声。</p>
<p>“没事啦没事啦，原来是同行啊，一场误会，一场误会。”说话间，蜜蜜一手跨在了对方的肩上，十足地豪气冲天。</p>
<p>再看黑衣人早已经把面罩扯了下来，脸上写满了六个字，“我受到了惊吓”。</p>
<p>“那我去把门按上就回去了。”他显然还没适应主人这么大的转变。</p>
<p>可是阿蜜蜜怎么能让他这么快走掉，为了拖住他，阿蜜蜜以迅雷不及掩耳盗铃之势跟他聊起了家常。</p>
<p>从阿蜜蜜那个睡不醒的邻居瞌睡聊到了那个屁股翘翘的邻居屁股，又从自己听说后邻衙门里的小鹿喜欢用辣椒水聊到了前邻九尺的八嘎好像又长个了。</p>
<p>最终，阿蜜蜜如愿以偿地留下了黑衣人。</p>
<p>因为黑衣人已经从开始的一头雾水听得彻底晕过去了。</p>
<p>此时环顾一下，才发现阿蜜蜜的屋子已经恢复如初。当然，那个铁门除外。</p>
<p>门的用途是什么呢？</p>
<p>人们装门的主要用途是防贼。可是谁敢来我阿蜜蜜的家里抢东西？所以蜜蜜觉得装不装门无所谓的。</p>
<p>可是既然没有门，就意味着谁都可以进来。</p>
<p>不只是贼。</p>
]]></content>
    
    
      <category term="江洋大盗阿蜜蜜" scheme="http://gengbiao.me/tags/%E6%B1%9F%E6%B4%8B%E5%A4%A7%E7%9B%97%E9%98%BF%E8%9C%9C%E8%9C%9C/"/>
    
      <category term="小说" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[江洋大盗阿蜜蜜(二)]]></title>
    <link href="http://gengbiao.me/novel/%E6%B1%9F%E6%B4%8B%E5%A4%A7%E7%9B%97%E9%98%BF%E8%9C%9C%E8%9C%9C2/"/>
    <id>http://gengbiao.me/novel/江洋大盗阿蜜蜜2/</id>
    <published>2014-12-04T16:00:00.000Z</published>
    <updated>2014-12-05T12:33:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="江洋大盗阿蜜蜜">江洋大盗阿蜜蜜</h1>
<h2 id="疯了的阿敏敏">疯了的阿敏敏</h2>
<p>“阿敏敏，襄阳人，于月前迁至洛城城北洛神弄堂44号，职业：盗贼。”</p>
<p>“襄阳人，于月前迁至洛城城北洛神弄堂44号。”</p>
<p>“洛城城北洛神弄堂44号。”</p>
<p>“城北洛神弄堂44号。”</p>
<p>阿蜜蜜从官府回来就一直念叨着这几句话。</p>
<p>了解内情的人明白她现在叫阿蜜蜜了，不了解内情的人还以为她惹上了什么官司，打算捏造身份跑路了。</p>
<p>当然，这些跟阿蜜蜜无关，她思考地只是如何对付这个占了她名号的外乡人。</p>
<p>“盗贼，哼，盗用老娘的名号还敢自称自己是盗贼，今天晚上我就去把你家搬光，让你见识见识什么叫真正的盗贼。”</p>
<p>“啊呸，是江洋大盗。”阿蜜蜜想到这里，又扬起了高昂的头。做完这些还是觉得气势不够，想了好久阿蜜蜜终于发现了问题所在，又用力挺了挺胸脯。</p>
<p>坐待夜深人静处，自是行侠仗义时。</p>
<p>“阿敏敏，你坐在门口干什么呢？”</p>
<p>“屁股叔叔啊，我等太阳下山呢，对了，以后我叫阿蜜蜜，我不叫阿敏敏了。”</p>
<p>“额，阿蜜蜜，这个名字听着挺甜啊，那阿敏，阿蜜蜜啊，你等太阳下山干什么呢？”</p>
<p>“我要去抢了阿敏敏。”</p>
<p>“……..”</p>
<p>屁股叔叔听到这就转身走了。</p>
<p>“阿敏敏，你坐在门口干什么呢？”</p>
<p>“瞌睡叔叔啊，我等太阳下山呢，对了，以后我叫阿蜜蜜，我不叫阿敏敏了。”</p>
<p>“额，阿蜜蜜，这个名字听着挺甜啊，那阿敏，阿蜜蜜啊，你等太阳下山干什么呢？”</p>
<p>“我要去抢了阿敏敏。”</p>
<p>“……..”</p>
<p>瞌睡叔叔听到这也转身走了。</p>
<p>“阿敏敏，你坐在门口干什么呢？”</p>
<p>“甲鱼叔叔啊，我等太阳下山呢，对了，以后我叫阿蜜蜜，我不叫阿敏敏了。”</p>
<p>…………</p>
<p>就这样一个邻居接一个邻居的走了过去。</p>
<p>半个时辰之后，大家都说，巷子里左转第三家的阿敏敏疯了。</p>
<h2 id="盗亦有道">盗亦有道</h2>
<p>是夜，三更过，洛城中.</p>
<p>空旷的路上除了偶尔传来打更者的小心火烛以外，再也听不见半分声响，阿蜜蜜院子里的布谷鸟也早早的睡了，可是屋子里常亮的蜡烛，昭示着这个世界上还有未眠人。</p>
<p>“还敢叫阿敏敏，今晚一定要把你的家搬空！”屋里的阿蜜蜜早就穿好了紧身衣，蒙住脸出发了。</p>
<p>风一般的阿蜜蜜就这么跑到了洛神弄堂44号，娴熟地准备翻墙入院。不过她转念一想，老娘现在是江洋大盗，怎么能干这种偷鸡摸狗的事情呢。走也要从正门光明正大的走进去啊！</p>
<p>于是，额，于是阿蜜蜜拿出工具来开始撬锁。</p>
<p>然后，三更过去一半了……</p>
<p>然后，三更过去了……</p>
<p>“这个锁是从西域工匠太极宇程的作坊流出来的，你用这个撬是肯定不行的。”旁边突然冒出来一个人。</p>
<p>阿蜜蜜一听到声音，非常专业地跳到了一边，谨慎的朝着声音来源处望去。</p>
<p>一名身高八尺有余的黑衣人，出现在阿蜜蜜地视线中。</p>
<p>“喂，把袜子套头上的那个，也是道上的吧，懂不懂规矩，我先来的。”阿蜜蜜一看不是官府的人，顿时松了口气。</p>
<p>然后那个人站在那没说话。</p>
<p>“阿喂！新来的吧，还不赶紧走，你也不去洛城打听打听，道上谁不知道我江洋大盗阿蜜蜜~”阿蜜蜜说完才想起来，自己也穿着夜行衣呢，根本看不出来是谁。</p>
<p>然后那个人站在那还是没说话。</p>
<p>“嘿！我这暴脾气，老娘的师傅可是白凤鸣，江湖人称盗圣白FM就是她老人家了。”阿蜜蜜说着说着觉得牛吹的有点大了，声音有点小了。</p>
<p>“我走了，你能打开这把锁么？”黑衣人终于说话了，说完都不等阿蜜蜜反应，转身背对着她，只听啪一下，锁开了。</p>
<p>锁开了！阿蜜蜜完全没看清他用什么开的锁，阿蜜蜜脑子迅速转了一下，定下心来。</p>
<p>“盗亦有道嘛，既然你我在这里碰上了也是缘分，那里面的东西五五分成吧。”</p>
<p>这个阿敏敏家里实在没什么好东西，搜罗了好久也没找到什么值钱的东西。可尽管这样，阿蜜蜜还得肉痛地分了一半出来。</p>
<p>这年头，抢别人东西容易，送别人东西难，把抢到手的东西送给别人是难上加难；男人送女人东西容易，把东西从女人手里拿回来比抢还难，让女人把抢到手的东西主动送给男人更是难上加难。</p>
<p>这不更难上加难的事情让阿蜜蜜碰上了，阿蜜蜜满脸不情愿地拎着自己的那份往外走。在院子里的大门前停了下来，思考着要不要趁黑衣人没看到，把大门拆了独吞回自己家。可是苦于搬不动，只能悻悻地回家了。</p>
<p>画面切回到小镇，四更已过，冷冷地街上吹着冷冷的风，原本寂静无人的路上，突然从洛神弄堂里闪出来一个人，只见来人身着夜行衣，扛着一个包袱大摇大摆地往城南走。不一会又一名同穿夜行衣的人鬼鬼祟祟地跟了上来。不是之前分赃的盗贼又是谁？</p>
<p>阿蜜蜜回家把东西往角落一甩就睡觉了。</p>
<p>时间飞快，五更就这么过去了，远处此起彼伏的鸡鸣声预示着又一个美好的清晨来了，八字型躺在床上的阿蜜蜜，嘴角上扬，还沉浸在昨晚第一次身为江洋大盗，在洛城城北完美的作案，习惯性地在床上翻了个身，像往常一样很自然地抓住自己的鞋，却迟迟没能听到鸟叫声。一个激灵就醒了。</p>
<p>怎么回事？！</p>
<p>怎么回事？！</p>
<p>鸟叫呢？！</p>
<p>阿蜜蜜又往屋里一扫，尼玛，劳资的家具呢，怎么被搬空了？！</p>
<p>阿蜜蜜赶紧走出院子，抬头一看，尼玛，劳资的鸟窝呢？！</p>
<p>什么声音？！阿蜜蜜转头向发声处望去，只见有个人后面背着一个鸟窝，正在拆自己的大门。</p>
<p>“尼玛！不想混了么！”怒火三丈地阿蜜蜜撸着袖子就冲了上去。</p>
]]></content>
    
    
      <category term="江洋大盗阿蜜蜜" scheme="http://gengbiao.me/tags/%E6%B1%9F%E6%B4%8B%E5%A4%A7%E7%9B%97%E9%98%BF%E8%9C%9C%E8%9C%9C/"/>
    
      <category term="小说" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下hexo从入门到精通]]></title>
    <link href="http://gengbiao.me/hexo/mac%E4%B8%8Bhexo%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>http://gengbiao.me/hexo/mac下hexo从入门到精通/</id>
    <published>2014-11-25T16:00:00.000Z</published>
    <updated>2014-11-26T13:29:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mac下hexo从入门到精通">Mac下hexo从入门到精通</h1>
<p>之前玩blog的时候接触到了hexo，到现在也告一段落了，总结一下吧。<br>hexo到底是什么的介绍就懒得讲了。我的环境是Mac下，所以</p>
<h2 id="需要安装什么">需要安装什么</h2>
<h3 id="git">git</h3>
<p>Mac下自带git，所以，不用安装了2333333<br>好吧，既然你诚心诚意的发问了。那我就稍微讲一下。</p>
<h4 id="如何安装git">如何安装git</h4>
<p>首先先装一个Homebrew，打开终端。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)</span>"</span></div></pre></td></tr></table></figure>

<p>等安装完了，还差一条指令。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> git</span></div></pre></td></tr></table></figure>

<h3 id="node-js">node.js</h3>
<p>你可以直接去下载安装包。<a href="http://nodejs.org" target="_blank" rel="external">node.js</a>;</p>
<p>或者直接用brew也是可以哒。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> node</span></div></pre></td></tr></table></figure>

<p>或者自先安装nvm。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/creationix/nvm.git ~/nvm</div><div class="line"><span class="keyword">echo</span> <span class="string">". ~/.nvm/nvm.sh"</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>

<p>关掉终端，重新打开，输入：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nvm <span class="operator"><span class="keyword">install</span> v0<span class="number">.10</span><span class="number">.33</span></span></div><div class="line">nvm <span class="keyword">use</span> v0<span class="number">.10</span><span class="number">.33</span></div><div class="line">nvm alias <span class="keyword">default</span> v0<span class="number">.10</span><span class="number">.33</span></div></pre></td></tr></table></figure>

<p>后面的那个v0.10.33就是node.js的版本，目前v0.10.33是最新的。</p>
<h3 id="hexo">hexo</h3>
<p>这一步得先安装好node.js。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hexo</span></div></pre></td></tr></table></figure>

<h2 id="需要先配什么">需要先配什么</h2>
<h3 id="注册github/gitcafe/code-io">注册github/gitcafe/code.io</h3>
<p>什么都行，总之只要提供免费主页托管的就会用起来萌萌哒。<br>然后，我用的是<a href="https://github.com" target="_blank" rel="external">github</a>。<br>生成SSH KEY</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -<span class="keyword">C</span> <span class="string">"your_email@example.com"</span></div></pre></td></tr></table></figure>

<p>然后将SSH KEY添加到github<br>登录到GitHub页面，右上角Account Settings-&gt;<br>SSH Public Keys-&gt;<br>Add another key-&gt;<br>将生成的key(id_rsa.pub文件）内容copy到输入框中-&gt;<br>save。</p>
<p>这个时候你在本地终端中，可以输入：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">ssh</span> -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure>

<p>这个时候出来一堆东西，你只要看到successful这个单词就可以确定连接成功了。</p>
<p>然后设置个人信息。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name <span class="string">"orifake"</span></div><div class="line">git config --<span class="keyword">global</span> user.email timyjykaka@gmail.<span class="keyword">com</span></div></pre></td></tr></table></figure>

<p>然后需要创建一个项目<br>在自己github主页右上角，创建一个新的repository。比如账号是myname，那么应该创建的repository的名字应该是myname.github.io。</p>
<h2 id="配完了要干什么">配完了要干什么</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">init</span> <span class="comment">//选择目录，创建hexo文件夹</span></div></pre></td></tr></table></figure>

<p>然后更新<code>_config.yml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/configure.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site 这里的配置，哪项配置反映在哪里，可以参考我的博客</span></div><div class="line"><span class="attribute">title</span>: Orifake<span class="string">'s blog #站点名，站点banner中</span></div><div class="line">subtitle: Step by step #副标题</div><div class="line">description: orifake's Blog|hexo|javascript ＃给搜索引擎看的，对站点的描述，可以自定义</div><div class="line"><span class="attribute">author</span>: orifake <span class="comment">#在站点左下角可以看到</span></div><div class="line"><span class="attribute">email</span>: timyjykaka<span class="property">@gmail</span>.com <span class="comment">#你的联系邮箱</span></div><div class="line"><span class="attribute">language</span>: zh-CN <span class="comment">#中文</span></div><div class="line"></div><div class="line"><span class="comment"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attribute">url</span>: ／</div><div class="line"><span class="attribute">root</span>: /</div><div class="line"><span class="attribute">permalink</span>: :year<span class="regexp">/:month/</span>:day<span class="regexp">/:title/</span></div><div class="line"><span class="attribute">tag_dir</span>: tags</div><div class="line"><span class="attribute">archive_dir</span>: archives</div><div class="line"><span class="attribute">category_dir</span>: categories</div><div class="line"></div><div class="line"><span class="comment"># Writing 文章布局、写作格式的定义，不修改</span></div><div class="line"><span class="attribute">new_post_name</span>: :title.md <span class="comment"># File name of new posts</span></div><div class="line"><span class="attribute">default_layout</span>: post</div><div class="line"><span class="attribute">auto_spacing</span>: <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></div><div class="line"><span class="attribute">titlecase</span>: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attribute">max_open_file</span>: <span class="number">100</span></div><div class="line"><span class="attribute">filename_case</span>: <span class="number">0</span></div><div class="line"><span class="attribute">highlight</span>:</div><div class="line">  <span class="attribute">enable</span>: <span class="literal">true</span></div><div class="line">  <span class="attribute">backtick_code_block</span>: <span class="literal">true</span></div><div class="line">  <span class="attribute">line_number</span>: <span class="literal">true</span></div><div class="line">  <span class="attribute">tab_replace</span>:</div><div class="line"></div><div class="line"><span class="comment"># Category & Tag</span></div><div class="line"><span class="attribute">default_category</span>: uncategorized</div><div class="line"><span class="attribute">category_map</span>:</div><div class="line"><span class="attribute">tag_map</span>:</div><div class="line"></div><div class="line"><span class="comment"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></div><div class="line"><span class="comment">## 2: Enable pagination</span></div><div class="line"><span class="comment">## 1: Disable pagination</span></div><div class="line"><span class="comment">## 0: Fully Disable</span></div><div class="line"><span class="attribute">archive</span>: <span class="number">1</span></div><div class="line"><span class="attribute">category</span>: <span class="number">1</span></div><div class="line"><span class="attribute">tag</span>: <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># Server 不修改</span></div><div class="line"><span class="comment">## Hexo uses Connect as a server</span></div><div class="line"><span class="comment">## You can customize the logger format as defined in</span></div><div class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></div><div class="line"><span class="attribute">port</span>: <span class="number">4000</span></div><div class="line"><span class="attribute">logger</span>: <span class="literal">false</span></div><div class="line"><span class="attribute">logger_format</span>:</div><div class="line"></div><div class="line"><span class="comment"># Date / Time format 日期格式，不修改</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attribute">date_format</span>: MMM D YYYY</div><div class="line"><span class="attribute">time_format</span>: <span class="attribute">H</span>:<span class="attribute">mm</span>:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination 每页显示文章数，可以自定义</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attribute">per_page</span>: <span class="number">10</span></div><div class="line"><span class="attribute">pagination_dir</span>: page</div><div class="line"></div><div class="line"><span class="comment"># Disqus Disqus插件，我们会替换成“多说”，不修改</span></div><div class="line"><span class="attribute">disqus_shortname</span>:</div><div class="line"></div><div class="line"><span class="comment"># Extensions 这里配置站点所用主题和插件</span></div><div class="line"><span class="comment">## Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></div><div class="line"><span class="comment">## Themes: https://github.com/hexojs/hexo/wiki/Themes</span></div><div class="line"><span class="attribute">theme</span>: coney</div><div class="line"><span class="attribute">exclude_generator</span>:</div><div class="line"></div><div class="line"><span class="comment"># Deployment 站点部署到github要配置</span></div><div class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></div><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: github</div><div class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="regexp">//gi</span>thub.com/myname/myname.github.io.git</div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>

<p>下面</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div><div class="line">hexo d</div></pre></td></tr></table></figure>

<p>就push上去了。</p>
]]></content>
    
    
      <category term="DIY" scheme="http://gengbiao.me/tags/DIY/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[主流语言的特长与对比]]></title>
    <link href="http://gengbiao.me/technique/%E4%B8%BB%E6%B5%81%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E9%95%BF%E4%B8%8E%E5%AF%B9%E6%AF%94/"/>
    <id>http://gengbiao.me/technique/主流语言的特长与对比/</id>
    <published>2014-11-25T11:23:00.000Z</published>
    <updated>2014-11-26T12:03:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="主流语言的特长与对比">主流语言的特长与对比</h1>
<h2 id="java">java</h2>
<p>Java语言是当今最普遍使用的开发语言，它简单易学（相对C++,C和Objective-C），且跨平台性非常强，对网络开发的支持令人称赞。很多企业使用Java语言来开发商业相关的网络应用。此外，Java语言也是开发Android应用的必备工具。</p>
<h2 id="C语言">C语言</h2>
<p>C语言是几个主流开发语言(Java,C++,C#,Objective-C)的根基所在。常有人说，学好C语言，其它的语言就会一通百通。因此对硬件底层性能的支持超强，它的主要应用领域是嵌入式开发、游戏引擎开发等偏底层的部分。</p>
<h2 id="PHP">PHP</h2>
<p>PHP语言主要用于开发网络应用（特别是web服务器端，也就是用户不可见的部分，如结合MySQL进行后台数据传输处理等），相对其它几门语言，它非常容易上手。但它的局限性在于除了web应用，对其它应用的开发力不从心。</p>
<h2 id="Javascript">Javascript</h2>
<p>Javascript语言主要用于开发Web前端（也就是用户可见的部分），随着HTML5技术的兴起，Javascript语言必将是未来三到五年的主流Web开发工具。</p>
<h2 id="‘C#’">‘C#’</h2>
<p>C#语言是微软为了对抗Java语言的强势而自行开发的一种编程语言。它和Java一样简单易学（同样是相对的），但只能支持微软的平台。闻名业界的.NET就是C#语言的最佳搭配。关于C#有个更新点，目前最火爆的移动平台3D游戏开发引擎Unity3D主要支持C#和javascript开发，而windows手机平台的卷土重来也让C#有了新的机会。但随着微软在移动互联网领域的式微，C#的地位和前几年比起来大有下降。</p>
<h2 id="Python,Ruby,Perl">Python,Ruby,Perl</h2>
<p>Python,Ruby,Perl同PHP语言的作用类似，属于脚本语言，对于开发网络应用非常高效。其中Python和另一种脚本语言Lua还常在游戏中作为脚本语言使用。</p>
<h2 id="Go语言">Go语言</h2>
<p>Go语言，一门全新的系统级语言，由Google开发，于2009年发布。虽然它的历史非常短暂，但根据目前的发展来看,Go语言有望在未来十年成为一款成功的系统级语言。Go语言功能强大，可以替代C++</p>
<h2 id="Basic">Basic</h2>
<p>Basic（Visual Basic)语言，曾经风骚一时，若干年前很多编程入门课程必教的开发语言。其学习曲线非常平缓，易于上手，但实际项目中用到的不是很多。</p>
<h2 id="SQL">SQL</h2>
<p>SQL语言，这是目前最重要的关系数据库操作语言，其影响已经超出数据库领域，在很多其它领域得到采用，比如人工智能领域的数据检索，软件开发工具中嵌入SQL的语言等。SQL语言是一种交互式查询语言，允许用户直接查询存储数据，但它并不是完整的程序语言，没有DO或FOR类似的循环语句，但可以嵌入到另一种语言中，通过接口发送到数据库管理系统。</p>
<h2 id="汇编语言">汇编语言</h2>
<p>汇编语言，虽然现在是高级编程语言的天下，但性能超强的直接面向硬件的汇编语言仍然在嵌入式开发领域占据着一席之地。只是汇编语言和硬件本身的关联很大，所以普及性一般。</p>
<h2 id="Lisp">Lisp</h2>
<p>LISP语言，一种相对冷门的函数式编程语言，其长处在于超强的运算能力。如今在人工智能领域和CAD绘图软件中仍有大量的支持者。</p>
<h2 id="Erlang">Erlang</h2>
<p>Erlang语言，一个结构化，动态类型编程语言，内建并行计算支持。起初是由爱立信专门为通信应用设计的，比如控制交换机或变换协议等，非常适合于构建分布式并行计算系统。</p>
]]></content>
    
    
      <category term="学习" scheme="http://gengbiao.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新手学编程，应该怎么学？]]></title>
    <link href="http://gengbiao.me/technique/%E6%96%B0%E6%89%8B%E5%AD%A6%E7%BC%96%E7%A8%8B%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%AD%A6%EF%BC%9F/"/>
    <id>http://gengbiao.me/technique/新手学编程，应该怎么学？/</id>
    <published>2014-11-15T16:45:00.000Z</published>
    <updated>2014-11-15T16:47:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="新手学编程，应该怎么学？">新手学编程，应该怎么学？</h1>
<p>以下纯属个人见解，大神勿喷。</p>
<h2 id="1-应该先学知识点吗？">1.应该先学知识点吗？</h2>
<p>个人经验表明，学编程，最开始拿一个月先学知识点或者只学知识点，基本就等于没学。于是你发现你很努力的看了一个月的书，还是什么都不会写，或者写出来了一坨bug都不知道怎么改，终于你放弃治疗了。当然，骨骼清奇的可能21天精通C++，然后妈妈再也不用担心他的编程了。人跟人的情况不一样，所以这里不是绝对的，但是我觉得对楼主的情况还是比较符合的。</p>
<h2 id="不看书那应该先写代码？">不看书那应该先写代码？</h2>
<p>你发现，你不看书，完了直接写代码又什么都不会，于是你表示要先学代码，完了你又懵了，先学代码怎么学？很多人又跑去看书了。。额，接下来发生了什么，这里参见第一条。</p>
<h2 id="书是干什么用的？">书是干什么用的？</h2>
<p>我觉得书更多的时候就是参考文档，就Android来说，谁最懂Android？当然是谷歌，那么问题来了，参考文档哪家强？不找官方文档你还要去找蓝翔么？<a href="https://developer.android.com/guide/index.html" target="_blank" rel="external">Android官方文档</a></p>
<p>至于其他的中文书，我觉得很多都夹杂了个人的见解，初学者慎入，不然很容易接触不到原汁原味的理念和思想。如果觉得英文的官方文档很蛋疼，看看翻译过来的中文版也可以。</p>
<h2 id="不看书也不先写代码难道要去山东找蓝翔吗？">不看书也不先写代码难道要去山东找蓝翔吗？</h2>
<p>如果你发现你学了一个月，看了一个月的书，还是什么都不会，那接下来你要么放弃治疗，要么吃口药开始从别人的代码读起来啊。那么问题来了？别人的代码哪家强?不找官方的demo你还要去山东找蓝翔么？<a href="https://developer.android.com/samples/index.html" target="_blank" rel="external">android samples</a></p>
<p>当然以上我提到的所有界面你如果不翻墙，可能都打不开，看着一坨无法连接可能你还会有一种要去山东找蓝翔的赶脚，不过不用怕， 你想要的这里都有，<a href="https://www.github.com" target="_blank" rel="external">GitHub</a>,你值得拥有。</p>
<p>其实这里说的就是题主说的，在应用中学习，但是在应用中学习的方式也是有区别的。</p>
<h2 id="5-读别人的代码应该怎么读？">5.读别人的代码应该怎么读？</h2>
<p><a href="http://gengbiao.me/technique/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E5%88%AB%E4%BA%BA%E7%9A%84%E4%BB%A3%E7%A0%81/" target="_blank" rel="external">如何读别人的代码</a>我写过一篇自我体会的博客，如何阅读别人的代码，自知水平一般，大神就不用点了。</p>
<h2 id="6-读别人的Android代码应该怎么读？">6.读别人的Android代码应该怎么读？</h2>
<p>注意千万别上来就一个一个文件地通读，相信我，其实不用相信我你也会发现根本读不明白的。什么？读当然要读明白才有用啊？废话，你丫直接通读就能读明白了还读他干啥。</p>
<p>其实读什么代码都先得搞明白数据的走向，具体到Android身上，他是有MVC层的。<br>View层在Android里其实就是传说中让无数开发人员蛋疼菊紧，闻风色变的UI适配，具体讲就是res/layout/.xml那堆东西。</p>
<p>Model跟Controller层就是.java了。这个分的不是很清楚，你可以自己作区分。</p>
<p>说通俗点你要懂得：</p>
<p>前端的一个数据用户输入进去，你要在后台如何获取到。</p>
<p>你后台的一个数据，如果反馈给前端。</p>
<p>做到这你会了点毛？你发现你毛都不会，但是这个时候其实你已经知道部分Android的文件夹之间是干什么的，之间是如何协作的。</p>
<p>什么？你说你还是没看懂啊，在心里问自己bin文件夹里是啥？res/layout以外的文件夹是啥？</p>
<p>大声的对自己吼一句：劳资怎么知道，我又没用到那呢。</p>
<p>不要再问搞不明白怎么往下学了？你刚开始的时候知道res/layout是干什么的吗？那现在呢？</p>
<h2 id="7-为毛要读别人的代码？">7.为毛要读别人的代码？</h2>
<p>写代码的最终目的是执行，所以你从一个能执行的程序开始，能很快的验证自己的学习到底对不对。</p>
<p>什么？你问我怎么验证？你改了以后他成功跑出了结果就说明你学的是对的啊。跑错了显然就是错的。</p>
<p>别人的代码好处就在于他都写好了，虽然你毛都看不懂。但是他能顺畅地跑起来。当然，除了用了你的电脑编译器编译了下，再用了你的手机安装呈现了以下，现在这事跟你半毛钱关系都没有。</p>
<p>但是你可以输出啊亲，这时候你必须给自己壮壮士气：“尼玛劳资虽然还不会Android，但是改个String值还是会的。” 所以你成功的将前台textView里的“A”改成了“B”。虽然你完全不知道发生了什么。但其实你已经知道数据输出到前台的最后一步是什么了。</p>
<p>搞到这，既然你已经成功的在屏幕输出了一个B，那么你可以装逼点说自己已经入门了.虽然你还是不懂别人的那坨代码。但是你已经潜意识地把代码细化到了某个点上开始逐个突破了。</p>
<h2 id="8-读到什么时候能学会？">8.读到什么时候能学会？</h2>
<p>读啊，接着读，再接下来呢？接下来就是按需学习了啊。</p>
<p>比如你想加个按钮，你就可以搜一下Android button的东西看一看，然后发现了xml里的<code>&lt;button/&gt;</code>和java里的<code>findViewById()</code>，<code>setOnclickListener()</code>.</p>
<p>比如你想向用户显示一些帮助/提示.于是你发现了Toast这个玩意。</p>
<p>什么？别人问你什么是Service，告诉他：“劳资不是不会Android，劳资压根没用到过那东西，要学的东西这么多，我现在还用不着先学他干啥。”</p>
<p>比如你。。。。。</p>
<p>若干个比如以后你发现，我凑，劳资当年改String值的时候怎么会觉得findViewById这个鬼函数这么难。</p>
<p>再若干个比如以后你发现，尼玛，劳资什么时候学会的Android</p>
<hr>
<p>以上。<br>本文回答在<a href="http://www.zhihu.com/question/26563105/answer/33224947?group_id=517078405854818304" target="_blank" rel="external">知乎:安卓开发学习应该先学知识点再做应用还是在做应用中学习？</a></p>
]]></content>
    
    
      <category term="technique" scheme="http://gengbiao.me/tags/technique/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下Nexus7升级Android 5.0]]></title>
    <link href="http://gengbiao.me/android/mac%E4%B8%8Bnexus7%E5%8D%87%E7%BA%A7android_5.0/"/>
    <id>http://gengbiao.me/android/mac下nexus7升级android_5.0/</id>
    <published>2014-11-13T11:24:00.000Z</published>
    <updated>2014-11-13T14:15:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mac下Nexus7升级Android_5-0">Mac下Nexus7升级Android 5.0</h1>
<p>今天谷歌正式发布了Android L，于是拿起Nexus 7果断刷机。下面分享下刷机过程，比较简单，记录一下。</p>
<h2 id="准备工作">准备工作</h2>
<ol>
<li>确保Nexus 7设备处于解锁状态，并且已经打开了USB调试</li>
<li>配置好adb和bootloader的环境变量，可以参考<a href="https://seo-michael.co.uk/how-to-setup-adb-on-os-x/" target="_blank" rel="external">这篇文章</a>。</li>
<li>准备好Android L的镜像了。Nexus 7的镜像我已经下好了，在<a href="http://pan.baidu.com/s/1kT7P4V1" target="_blank" rel="external">这里</a>分享给大家。</li>
</ol>
<h2 id="开始升级">开始升级</h2>
<ol>
<li>将Nexus设备连接电脑。</li>
<li>在终端下输入 </li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">adb</span> reboot bootloader</div></pre></td></tr></table></figure>

<p> 命令进入 bootloader 模式。</p>
<ol>
<li>将下载的升级镜像tgz解压缩出来。解压缩的图片如下，然后你会看到一个文件<code>flash-all.sh</code><br><img src="/img/android/android_L_image.png" alt="android L image"></li>
<li>在终端进入这个文件的目录下。执行</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./flash-<span class="keyword">all</span>.<span class="keyword">sh</span></div></pre></td></tr></table></figure>

<p>坐等升级完成吧。哈哈~</p>
<h2 id="碰到的问题">碰到的问题</h2>
<h3 id="archive_does_not_contain_‘boot-sig’">archive does not contain ‘boot.sig’</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">archive does <span class="keyword">not</span> contain <span class="string">'boot.sig'</span></div><div class="line"></div><div class="line">archive does <span class="keyword">not</span> contain <span class="string">'recovery.sig'</span></div></pre></td></tr></table></figure>

<p>这个不是系统问题，这个是因为你计算机的RAM内存不够了。关掉几个浏览器页面就可以了，甚至什么都不操作等等就好了。</p>
<h3 id="网络验证失败">网络验证失败</h3>
<p>第一次进入界面的时候，连上wifi后总是提示卡在网络验证这个地方。<br>等了等发现，尼玛是因为google连接不上无法访问搞得！<br>这个，自己找个能翻墙的wifi吧。<br>祝你好运。</p>
]]></content>
    
    
      <category term="Android" scheme="http://gengbiao.me/tags/Android/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android设置全屏]]></title>
    <link href="http://gengbiao.me/android/android%E5%85%A8%E5%B1%8F%EF%BC%9A%E6%B6%88%E9%99%A4title_bar%E5%92%8C%E8%99%9A%E6%8B%9F%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>http://gengbiao.me/android/android全屏：消除title_bar和虚拟导航栏/</id>
    <published>2014-11-12T11:25:00.000Z</published>
    <updated>2014-11-12T04:11:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Android全屏：消除title_bar和虚拟导航栏">Android全屏：消除title_bar和虚拟导航栏</h1>
<h2 id="消除title_bar">消除title_bar</h2>
<p>在进行android开发时，每个Activity会默认带上一个title bar用以显示程序名，有时为了扩大屏幕的显示区域需要去掉这个title bar，这个时候可以用以下方法操作：</p>
<p>最简单的就是动态修改了。</p>
<h3 id="代码动态修改：">代码动态修改：</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.requestWindowFeature(Window.FEATURE_NO_TITLE);</div></pre></td></tr></table></figure>

<p><strong>注意这句一定要写在setContentView()方法的前面，不然会报错的</strong><br><strong>因为是动态修改，所以可能会在程序运行的开始，看到先出现标题栏，然后再消失的情况</strong></p>
<h3 id="修改AndroidManifest-xml文件">修改AndroidManifest.xml文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;application android:<span class="variable">icon=</span><span class="string">"@drawable/icon"</span> </div><div class="line">        android:<span class="variable">label=</span><span class="string">"@string/app_name"</span> </div><div class="line">        android:<span class="variable">theme=</span><span class="string">"@android:style/Theme.NoTitleBar"</span>&gt;</div></pre></td></tr></table></figure>

<p>上面将属性加到了application，会应用到整个程序，如果想应用到某一个activity，可以像下面这样:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">           android:<span class="variable">name=</span><span class="string">"xxx"</span></div><div class="line">           android:<span class="variable">theme=</span><span class="string">"@android:style/Theme.NoTitleBar"</span>&gt;</div></pre></td></tr></table></figure>

<p>还有一种情况就是默认的<code>Theme.NoTitleBar</code>不满足我们的需求，或者想针对于某几个activity做一些操作，比如notitle,orientation等等，可以参考第三种方式，自己定义一个主题。</p>
<h3 id="在res/values目录下面新建一个style-xml的文件">在res/values目录下面新建一个style.xml的文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"notitle"</span>&gt;</span><span class="css"></span></div><div class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">android</span><span class="pseudo">:windowNoTitle"</span>&gt;<span class="tag">true</span>&lt;/<span class="tag">item</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">style</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></div></pre></td></tr></table></figure>

<p>这样，我们就自定义了一个style,就相当于一个主题，然后在AndroidManifest.xml文件中定义</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;application android:<span class="variable">icon=</span><span class="string">"@drawable/icon"</span> </div><div class="line">        android:<span class="variable">label=</span><span class="string">"@string/app_name"</span> </div><div class="line">        android:<span class="variable">theme=</span><span class="string">"@style/notitle"</span>&gt;</div></pre></td></tr></table></figure>

<h2 id="全屏">全屏</h2>
<p>也是三种方法，参考上面。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">getWindow</span>()<span class="class">.setFlags</span>(WindowManager<span class="class">.LayoutParams</span><span class="class">.FLAG_FULLSCREEN</span>, WindowManager<span class="class">.LayoutParams</span><span class="class">.FLAG_FULLSCREEN</span>);</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:<span class="variable">theme=</span><span class="string">"@android:style/Theme.NoTitleBar.Fullscreen"</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">application</span> android:icon=<span class="string">"<span class="variable">@drawable</span>/icon"</span> </div><div class="line">        android:label=<span class="string">"<span class="variable">@string</span>/app_name"</span></div><div class="line">        android:theme=<span class="string">"<span class="variable">@style</span>/fullscreem"</span></div></pre></td></tr></table></figure>

<h2 id="去掉虚拟导航">去掉虚拟导航</h2>
<p>其实现在全屏了还是存在最下面的虚拟导航，即home，back的系统按键。<br>这里并不能彻底隐藏，只能点击隐藏，如果你只是设置了<code>setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);</code>那么点击屏幕后就会出来，而且再也隐藏不了了，所以这里我建议给activity加一个onClick事件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="type">void</span> onClick(<span class="type">View</span> v) {</div><div class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</div><div class="line">		<span class="type">int</span> i = v.getSystemUiVisibility();</div><div class="line">		<span class="keyword">if</span> (i == <span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span>) {</div><div class="line">			v.setSystemUiVisibility(<span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_VISIBLE</span>);</div><div class="line">		} <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_VISIBLE</span>) {</div><div class="line">			v.setSystemUiVisibility(<span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_LOW_PROFILE</span>);</div><div class="line">		} <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_LOW_PROFILE</span>) {</div><div class="line">			v.setSystemUiVisibility(<span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span>);</div><div class="line">		}</div><div class="line">	}</div></pre></td></tr></table></figure>

<p>然后你就可以实现点击隐藏，点击再出现，再点击又隐藏了。</p>
]]></content>
    
    
      <category term="Android" scheme="http://gengbiao.me/tags/Android/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android权限列表]]></title>
    <link href="http://gengbiao.me/android/android%E6%9D%83%E9%99%90%E5%A4%A7%E5%85%A8/"/>
    <id>http://gengbiao.me/android/android权限大全/</id>
    <published>2014-11-12T11:24:00.000Z</published>
    <updated>2014-11-12T04:11:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Android_权限列表">Android 权限列表</h1>
<p>之前开发经常会使用到这些东西，干脆收集起来做个记录。</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header </th>
</tr>
</thead>
<tbody>
<tr>
<td>访问登记属性</td>
<td>android.permission.ACCESS_CHECKIN_PROPERTIES ，读取或写入登记check-in数据库属性表的权限</td>
</tr>
<tr>
<td>获取错略位置</td>
<td>android.permission.ACCESS_COARSE_LOCATION，通过WiFi或移动基站的方式获取用户错略的经纬度信息，定位精度大概误差在30~1500米</td>
</tr>
<tr>
<td>获取精确位置</td>
<td>android.permission.ACCESS_FINE_LOCATION，通过GPS芯片接收卫星的定位信息，定位精度达10米以内</td>
</tr>
<tr>
<td>访问定位额外命令</td>
<td>android.permission.ACCESS_LOCATION_EXTRA_COMMANDS，允许程序访问额外的定位提供者指令</td>
</tr>
<tr>
<td>获取模拟定位信息</td>
<td>android.permission.ACCESS_MOCK_LOCATION，获取模拟定位信息，一般用于帮助开发者调试应用</td>
</tr>
<tr>
<td>获取网络状态</td>
<td>android.permission.ACCESS_NETWORK_STATE，获取网络信息状态，如当前的网络连接是否有效</td>
</tr>
<tr>
<td>访问Surface Flinger</td>
<td>android.permission.ACCESS_SURFACE_FLINGER，Android平台上底层的图形显示支持，一般用于游戏或照相机预览界面和底层模式的屏幕截图</td>
</tr>
<tr>
<td>获取WiFi状态</td>
<td>android.permission.ACCESS_WIFI_STATE，获取当前WiFi接入的状态以及WLAN热点的信息</td>
</tr>
<tr>
<td>账户管理</td>
<td>android.permission.ACCOUNT_MANAGER，获取账户验证信息，主要为GMail账户信息，只有系统级进程才能访问的权限</td>
</tr>
<tr>
<td>验证账户</td>
<td>android.permission.AUTHENTICATE_ACCOUNTS，允许一个程序通过账户验证方式访问账户管理ACCOUNT_MANAGER相关信息</td>
</tr>
<tr>
<td>电量统计</td>
<td>android.permission.BATTERY_STATS，获取电池电量统计信息</td>
</tr>
<tr>
<td>绑定小插件</td>
<td>android.permission.BIND_APPWIDGET，允许一个程序告诉appWidget服务需要访问小插件的数据库，只有非常少的应用才用到此权限</td>
</tr>
<tr>
<td>绑定设备管理</td>
<td>android.permission.BIND_DEVICE_ADMIN，请求系统管理员接收者receiver，只有系统才能使用</td>
</tr>
<tr>
<td>绑定输入法</td>
<td>android.permission.BIND_INPUT_METHOD ，请求InputMethodService服务，只有系统才能使用</td>
</tr>
<tr>
<td>绑定RemoteView</td>
<td>android.permission.BIND_REMOTEVIEWS，必须通过RemoteViewsService服务来请求，只有系统才能用</td>
</tr>
<tr>
<td>绑定壁纸</td>
<td>android.permission.BIND_WALLPAPER，必须通过WallpaperService服务来请求，只有系统才能用</td>
</tr>
<tr>
<td>使用蓝牙</td>
<td>android.permission.BLUETOOTH，允许程序连接配对过的蓝牙设备</td>
</tr>
<tr>
<td>蓝牙管理</td>
<td>android.permission.BLUETOOTH_ADMIN，允许程序进行发现和配对新的蓝牙设备</td>
</tr>
<tr>
<td>变成砖头</td>
<td>android.permission.BRICK，能够禁用手机，非常危险，顾名思义就是让手机变成砖头</td>
</tr>
<tr>
<td>应用删除时广播</td>
<td>android.permission.BROADCAST_PACKAGE_REMOVED，当一个应用在删除时触发一个广播</td>
</tr>
<tr>
<td>收到短信时广播</td>
<td>android.permission.BROADCAST_SMS，当收到短信时触发一个广播</td>
</tr>
<tr>
<td>连续广播</td>
<td>android.permission.BROADCAST_STICKY，允许一个程序收到广播后快速收到下一个广播</td>
</tr>
<tr>
<td>WAP PUSH广播</td>
<td>android.permission.BROADCAST_WAP_PUSH，WAP PUSH服务收到后触发一个广播</td>
</tr>
<tr>
<td>拨打电话</td>
<td>android.permission.CALL_PHONE，允许程序从非系统拨号器里输入电话号码</td>
</tr>
<tr>
<td>通话权限</td>
<td>android.permission.CALL_PRIVILEGED，允许程序拨打电话，替换系统的拨号器界面</td>
</tr>
<tr>
<td>拍照权限</td>
<td>android.permission.CAMERA，允许访问摄像头进行拍照</td>
</tr>
<tr>
<td>改变组件状态</td>
<td>android.permission.CHANGE_COMPONENT_ENABLED_STATE，改变组件是否启用状态</td>
</tr>
<tr>
<td>改变配置</td>
<td>android.permission.CHANGE_CONFIGURATION，允许当前应用改变配置，如定位</td>
</tr>
<tr>
<td>改变网络状态</td>
<td>android.permission.CHANGE_NETWORK_STATE，改变网络状态如是否能联网</td>
</tr>
<tr>
<td>改变WiFi多播状态</td>
<td>android.permission.CHANGE_WIFI_MULTICAST_STATE，改变WiFi多播状态</td>
</tr>
<tr>
<td>改变WiFi状态</td>
<td>android.permission.CHANGE_WIFI_STATE，改变WiFi状态</td>
</tr>
<tr>
<td>清除应用缓存</td>
<td>android.permission.CLEAR_APP_CACHE，清除应用缓存</td>
</tr>
<tr>
<td>清除用户数据</td>
<td>android.permission.CLEAR_APP_USER_DATA，清除应用的用户数据</td>
</tr>
<tr>
<td>底层访问权限</td>
<td>android.permission.CWJ_GROUP，允许CWJ账户组访问底层信息</td>
</tr>
<tr>
<td>手机优化大师扩展权限</td>
<td>android.permission.CELL_PHONE_MASTER_EX，手机优化大师扩展权限</td>
</tr>
<tr>
<td>控制定位更新</td>
<td>android.permission.CONTROL_LOCATION_UPDATES，允许获得移动网络定位信息改变</td>
</tr>
<tr>
<td>删除缓存文件</td>
<td>android.permission.DELETE_CACHE_FILES，允许应用删除缓存文件</td>
</tr>
<tr>
<td>删除应用</td>
<td>android.permission.DELETE_PACKAGES，允许程序删除应用</td>
</tr>
<tr>
<td>电源管理</td>
<td>android.permission.DEVICE_POWER，允许访问底层电源管理</td>
</tr>
<tr>
<td>应用诊断</td>
<td>android.permission.DIAGNOSTIC，允许程序到RW到诊断资源</td>
</tr>
<tr>
<td>禁用键盘锁</td>
<td>android.permission.DISABLE_KEYGUARD，允许程序禁用键盘锁</td>
</tr>
<tr>
<td>转存系统信息</td>
<td>android.permission.DUMP，允许程序获取系统dump信息从系统服务</td>
</tr>
<tr>
<td>状态栏控制</td>
<td>android.permission.EXPAND_STATUS_BAR，允许程序扩展或收缩状态栏</td>
</tr>
<tr>
<td>工厂测试模式</td>
<td>android.permission.FACTORY_TEST，允许程序运行工厂测试模式</td>
</tr>
<tr>
<td>使用闪光灯</td>
<td>android.permission.FLASHLIGHT，允许访问闪光灯</td>
</tr>
<tr>
<td>强制后退</td>
<td>android.permission.FORCE_BACK，允许程序强制使用back后退按键，无论Activity是否在顶层</td>
</tr>
<tr>
<td>访问账户Gmail列表</td>
<td>android.permission.GET_ACCOUNTS，访问GMail账户列表</td>
</tr>
<tr>
<td>获取应用大小</td>
<td>android.permission.GET_PACKAGE_SIZE，获取应用的文件大小</td>
</tr>
<tr>
<td>获取任务信息</td>
<td>android.permission.GET_TASKS，允许程序获取当前或最近运行的应用</td>
</tr>
<tr>
<td>允许全局搜索</td>
<td>android.permission.GLOBAL_SEARCH，允许程序使用全局搜索功能</td>
</tr>
<tr>
<td>硬件测试</td>
<td>android.permission.HARDWARE_TEST，访问硬件辅助设备，用于硬件测试</td>
</tr>
<tr>
<td>注射事件</td>
<td>android.permission.INJECT_EVENTS，允许访问本程序的底层事件，获取按键、轨迹球的事件流</td>
</tr>
<tr>
<td>安装定位提供</td>
<td>android.permission.INSTALL_LOCATION_PROVIDER，安装定位提供</td>
</tr>
<tr>
<td>安装应用程序</td>
<td>android.permission.INSTALL_PACKAGES，允许程序安装应用</td>
</tr>
<tr>
<td>内部系统窗口</td>
<td>android.permission.INTERNAL_SYSTEM_WINDOW，允许程序打开内部窗口，不对第三方应用程序开放此权限</td>
</tr>
<tr>
<td>访问网络</td>
<td>android.permission.INTERNET，访问网络连接，可能产生GPRS流量</td>
</tr>
<tr>
<td>结束后台进程</td>
<td>android.permission.KILL_BACKGROUND_PROCESSES，允许程序调用killBackgroundProcesses(String).方法结束后台进程</td>
</tr>
<tr>
<td>管理账户</td>
<td>android.permission.MANAGE_ACCOUNTS，允许程序管理AccountManager中的账户列表</td>
</tr>
<tr>
<td>管理程序引用</td>
<td>android.permission.MANAGE_APP_TOKENS，管理创建、摧毁、Z轴顺序，仅用于系统</td>
</tr>
<tr>
<td>高级权限</td>
<td>android.permission.MTWEAK_USER，允许mTweak用户访问高级系统权限</td>
</tr>
<tr>
<td>社区权限</td>
<td>android.permission.MTWEAK_FORUM，允许使用mTweak社区权限</td>
</tr>
<tr>
<td>软格式化</td>
<td>android.permission.MASTER_CLEAR，允许程序执行软格式化，删除系统配置信息</td>
</tr>
<tr>
<td>修改声音设置</td>
<td>android.permission.MODIFY_AUDIO_SETTINGS，修改声音设置信息</td>
</tr>
<tr>
<td>修改电话状态</td>
<td>android.permission.MODIFY_PHONE_STATE，修改电话状态，如飞行模式，但不包含替换系统拨号器界面</td>
</tr>
<tr>
<td>格式化文件系统</td>
<td>android.permission.MOUNT_FORMAT_FILESYSTEMS，格式化可移动文件系统，比如格式化清空SD卡</td>
</tr>
<tr>
<td>挂载文件系统</td>
<td>android.permission.MOUNT_UNMOUNT_FILESYSTEMS，挂载、反挂载外部文件系统</td>
</tr>
<tr>
<td>允许NFC通讯</td>
<td>android.permission.NFC，允许程序执行NFC近距离通讯操作，用于移动支持</td>
</tr>
<tr>
<td>永久Activity</td>
<td>android.permission.PERSISTENT_ACTIVITY，创建一个永久的Activity，该功能标记为将来将被移除</td>
</tr>
<tr>
<td>处理拨出电话</td>
<td>android.permission.PROCESS_OUTGOING_CALLS，允许程序监视，修改或放弃播出电话</td>
</tr>
<tr>
<td>读取日程提醒</td>
<td>android.permission.READ_CALENDAR，允许程序读取用户的日程信息</td>
</tr>
<tr>
<td>读取联系人</td>
<td>android.permission.READ_CONTACTS，允许应用访问联系人通讯录信息</td>
</tr>
<tr>
<td>屏幕截图</td>
<td>android.permission.READ_FRAME_BUFFER，读取帧缓存用于屏幕截图</td>
</tr>
<tr>
<td>读取收藏夹和历史记录    com.</td>
<td>android.browser.permission.READ_HISTORY_BOOKMARKS，读取浏览器收藏夹和历史记录</td>
</tr>
<tr>
<td>读取输入状态</td>
<td>android.permission.READ_INPUT_STATE，读取当前键的输入状态，仅用于系统</td>
</tr>
<tr>
<td>读取系统日志</td>
<td>android.permission.READ_LOGS，读取系统底层日志</td>
</tr>
<tr>
<td>读取电话状态</td>
<td>android.permission.READ_PHONE_STATE，访问电话状态</td>
</tr>
<tr>
<td>读取短信内容</td>
<td>android.permission.READ_SMS，读取短信内容</td>
</tr>
<tr>
<td>读取同步设置</td>
<td>android.permission.READ_SYNC_SETTINGS，读取同步设置，读取Google在线同步设置</td>
</tr>
<tr>
<td>读取同步状态</td>
<td>android.permission.READ_SYNC_STATS，读取同步状态，获得Google在线同步状态</td>
</tr>
<tr>
<td>重启设备</td>
<td>android.permission.REBOOT，允许程序重新启动设备</td>
</tr>
<tr>
<td>开机自动允许</td>
<td>android.permission.RECEIVE_BOOT_COMPLETED，允许程序开机自动运行</td>
</tr>
<tr>
<td>接收彩信</td>
<td>android.permission.RECEIVE_MMS，接收彩信</td>
</tr>
<tr>
<td>接收短信</td>
<td>android.permission.RECEIVE_SMS，接收短信</td>
</tr>
<tr>
<td>接收Wap Push</td>
<td>android.permission.RECEIVE_WAP_PUSH，接收WAP PUSH信息</td>
</tr>
<tr>
<td>录音</td>
<td>android.permission.RECORD_AUDIO，录制声音通过手机或耳机的麦克</td>
</tr>
<tr>
<td>排序系统任务</td>
<td>android.permission.REORDER_TASKS，重新排序系统Z轴运行中的任务</td>
</tr>
<tr>
<td>结束系统任务</td>
<td>android.permission.RESTART_PACKAGES，结束任务通过restartPackage(String)方法，该方式将在外来放弃</td>
</tr>
<tr>
<td>发送短信</td>
<td>android.permission.SEND_SMS，发送短信</td>
</tr>
<tr>
<td>设置Activity观察其</td>
<td>android.permission.SET_ACTIVITY_WATCHER，设置Activity观察器一般用于monkey测试</td>
</tr>
<tr>
<td>设置闹铃提醒    com.</td>
<td>android.alarm.permission.SET_ALARM，设置闹铃提醒</td>
</tr>
<tr>
<td>设置总是退出</td>
<td>android.permission.SET_ALWAYS_FINISH，设置程序在后台是否总是退出</td>
</tr>
<tr>
<td>设置动画缩放</td>
<td>android.permission.SET_ANIMATION_SCALE，设置全局动画缩放</td>
</tr>
<tr>
<td>设置调试程序</td>
<td>android.permission.SET_DEBUG_APP，设置调试程序，一般用于开发</td>
</tr>
<tr>
<td>设置屏幕方向</td>
<td>android.permission.SET_ORIENTATION，设置屏幕方向为横屏或标准方式显示，不用于普通应用</td>
</tr>
<tr>
<td>设置应用参数</td>
<td>android.permission.SET_PREFERRED_APPLICATIONS，设置应用的参数，已不再工作具体查看addPackageToPreferred(String) 介绍</td>
</tr>
<tr>
<td>设置进程限制</td>
<td>android.permission.SET_PROCESS_LIMIT，允许程序设置最大的进程数量的限制</td>
</tr>
<tr>
<td>设置系统时间</td>
<td>android.permission.SET_TIME，设置系统时间</td>
</tr>
<tr>
<td>设置系统时区</td>
<td>android.permission.SET_TIME_ZONE，设置系统时区</td>
</tr>
<tr>
<td>设置桌面壁纸</td>
<td>android.permission.SET_WALLPAPER，设置桌面壁纸</td>
</tr>
<tr>
<td>设置壁纸建议</td>
<td>android.permission.SET_WALLPAPER_HINTS，设置壁纸建议</td>
</tr>
<tr>
<td>发送永久进程信号</td>
<td>android.permission.SIGNAL_PERSISTENT_PROCESSES，发送一个永久的进程信号</td>
</tr>
<tr>
<td>状态栏控制</td>
<td>android.permission.STATUS_BAR，允许程序打开、关闭、禁用状态栏</td>
</tr>
<tr>
<td>访问订阅内容</td>
<td>android.permission.SUBSCRIBED_FEEDS_READ，访问订阅信息的数据库</td>
</tr>
<tr>
<td>写入订阅内容</td>
<td>android.permission.SUBSCRIBED_FEEDS_WRITE，写入或修改订阅内容的数据库</td>
</tr>
<tr>
<td>显示系统窗口</td>
<td>android.permission.SYSTEM_ALERT_WINDOW，显示系统窗口</td>
</tr>
<tr>
<td>更新设备状态</td>
<td>android.permission.UPDATE_DEVICE_STATS，更新设备状态</td>
</tr>
<tr>
<td>使用证书</td>
<td>android.permission.USE_CREDENTIALS，允许程序请求验证从AccountManager</td>
</tr>
<tr>
<td>使用SIP视频</td>
<td>android.permission.USE_SIP，允许程序使用SIP视频服务</td>
</tr>
<tr>
<td>使用振动</td>
<td>android.permission.VIBRATE，允许振动</td>
</tr>
<tr>
<td>唤醒锁定</td>
<td>android.permission.WAKE_LOCK，允许程序在手机屏幕关闭后后台进程仍然运行</td>
</tr>
<tr>
<td>写入GPRS接入点设置</td>
<td>android.permission.WRITE_APN_SETTINGS，写入网络GPRS接入点设置</td>
</tr>
<tr>
<td>写入日程提醒</td>
<td>android.permission.WRITE_CALENDAR，写入日程，但不可读取</td>
</tr>
<tr>
<td>写入联系人</td>
<td>android.permission.WRITE_CONTACTS，写入联系人，但不可读取</td>
</tr>
<tr>
<td>写入外部存储</td>
<td>android.permission.WRITE_EXTERNAL_STORAGE，允许程序写入外部存储，如SD卡上写文件</td>
</tr>
<tr>
<td>写入Google地图数据</td>
<td>android.permission.WRITE_GSERVICES，允许程序写入Google Map服务数据</td>
</tr>
<tr>
<td>写入收藏夹和历史记录    com.</td>
<td>android.browser.permission.WRITE_HISTORY_BOOKMARKS，写入浏览器历史记录或收藏夹，但不可读取</td>
</tr>
<tr>
<td>读写系统敏感设置</td>
<td>android.permission.WRITE_SECURE_SETTINGS，允许程序读写系统安全敏感的设置项</td>
</tr>
<tr>
<td>读写系统设置</td>
<td>android.permission.WRITE_SETTINGS，允许读写系统设置项</td>
</tr>
<tr>
<td>编写短信</td>
<td>android.permission.WRITE_SMS，允许编写短信</td>
</tr>
<tr>
<td>写入在线同步设置</td>
<td>android.permission.WRITE_SYNC_SETTINGS，写入Google在线同步设置</td>
</tr>
</tbody>
</table>
]]></content>
    
    
      <category term="Android" scheme="http://gengbiao.me/tags/Android/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 定时器]]></title>
    <link href="http://gengbiao.me/android/android_%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://gengbiao.me/android/android_定时器/</id>
    <published>2014-11-12T11:23:00.000Z</published>
    <updated>2014-11-12T04:11:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Android_定时器">Android 定时器</h1>
<h2 id="Handler与sleep(long)方法">Handler与sleep(long)方法</h2>
<p>Handler主要用来处理接受到的消息。这只是最主要的方法，当然Handler里还有其他的方法供实现，有兴趣的可以去查API，这里不过多解释。</p>
<h4 id="定义一个Handler类，用于处理接受到的Message。">定义一个Handler类，用于处理接受到的Message。</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Handler handler = <span class="keyword">new</span> Handler() {</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span>(Message msg) {</div><div class="line">        <span class="comment">// 要做的事情</span></div><div class="line">        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="新建一个实现Runnable接口的线程类，如下：">新建一个实现Runnable接口的线程类，如下：</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">			<span class="keyword">try</span> {</div><div class="line">				Thread.sleep(<span class="number">10000</span>);<span class="comment">// 线程暂停10秒，单位毫秒</span></div><div class="line">				Message message = <span class="keyword">new</span> Message();</div><div class="line">				message.what = <span class="number">1</span>;</div><div class="line">				handler.sendMessage(message);<span class="comment">// 发送消息</span></div><div class="line">			} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="在需要启动线程的地方加入下面语句：">在需要启动线程的地方加入下面语句：</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> MyThread())<span class="built_in">.</span>start();</div></pre></td></tr></table></figure>

<h4 id="启动线程后，线程每10s发送一次消息。">启动线程后，线程每10s发送一次消息。</h4>
<h2 id="Handler的postDelayed(Runnable,_long)方法">Handler的postDelayed(Runnable, long)方法</h2>
<h4 id="定义一个Handler类">定义一个Handler类</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">Handler</span> handler=new <span class="type">Handler</span>();</div><div class="line"><span class="type">Runnable</span> runnable=new <span class="type">Runnable</span>() {</div><div class="line">    @<span class="type">Override</span></div><div class="line">    public <span class="type">void</span> run() {</div><div class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</div><div class="line">        //要做的事情</div><div class="line">        handler.postDelayed(this, <span class="number">2000</span>);</div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="启动计时器">启动计时器</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">handler</span>.postDelayed(runnable, <span class="number">2000</span>);</span>//每两秒执行一次runnable.</div></pre></td></tr></table></figure>

<h4 id="停止计时器">停止计时器</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">handler</span>.removeCallbacks(runnable);</span></div></pre></td></tr></table></figure>

<h2 id="Handler与timer及TimerTask结合的方法">Handler与timer及TimerTask结合的方法</h2>
<h4 id="定义定时器、定时器任务及Handler句柄">定义定时器、定时器任务及Handler句柄</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Timer timer = <span class="keyword">new</span> Timer(); </div><div class="line"><span class="keyword">private</span> TimerTask task; </div><div class="line">Handler handler = <span class="keyword">new</span> Handler() { </div><div class="line">    <span class="annotation">@Override</span> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span>(Message msg) { </div><div class="line">        <span class="comment">// TODO Auto-generated method stub </span></div><div class="line">        <span class="comment">// 要做的事情 </span></div><div class="line">        <span class="keyword">super</span>.handleMessage(msg); </div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="初始化计时器任务">初始化计时器任务</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">task = new <span class="type">TimerTask</span>() { </div><div class="line">    @<span class="type">Override</span> </div><div class="line">    public <span class="type">void</span> run() { </div><div class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub </div><div class="line">        <span class="type">Message</span> message = new <span class="type">Message</span>(); </div><div class="line">        message.what = <span class="number">1</span>; </div><div class="line">        handler.sendMessage(message); </div><div class="line">    } </div><div class="line">};</div></pre></td></tr></table></figure>

<p>就是说当定时器到达指定的时间时要做的工作，这里是想Handler发送一个消息，由Handler类进行处理。</p>
<h4 id="启动定时器">启动定时器</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">timer.schedule(<span class="keyword">task</span>, <span class="number">2000</span>, <span class="number">2000</span>);</div></pre></td></tr></table></figure>

<p>java.util.Timer.schedule(TimerTask task, long delay):这个方法是说，dalay/1000秒后执行task.只执行一次。<br>java.util.Timer.schedule(TimerTask task, long delay, long period)：这个方法是说，delay/1000秒后执行task,然后进过period/1000秒再次执行task，这个用于循环任务，执行无数次，当然，你可以用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">timer</span>.cancel();</div></pre></td></tr></table></figure>

<p>取消计时器的执行。</p>
<h4 id="Timer的坑">Timer的坑</h4>
<h5 id="根本停不下来！">根本停不下来！</h5>
<p>这个Timer开发的时候启动了以后发现根本停不下来。<br>根本停不下来！</p>
<p>然后我发现尼玛<code>timer.cancel()</code>里的timer跟<code>timer.schedule(task, 2000, 2000);</code>不是一个！</p>
<p>于是我出门吃个根棒棒糖，表示想一个人静静。</p>
<p>回来后发现，timer声明的时候不是全局声明的。</p>
<p>于是在timer.cancel的时候系统自动给乱七八糟的指了一个不知道在哪的指针。</p>
<p>加到全局去声明，世界顿时和谐了。</p>
<h5 id="只能执行一遍">只能执行一遍</h5>
<p>你发现当你<code>timer.cancel()</code>后，如果再想执行这个timer.schedule就会报错了。<br>那是因为timer.cancel后这个timer整个被释放掉了，也就是timer为空了。所以如果多次使用。需要每次在使用前检查是否为空。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">timer</span> == <span class="literal">null</span>) {</div><div class="line">   <span class="built_in">timer</span> = <span class="keyword">new</span> <span class="built_in">Timer</span>();</div><div class="line">}</div><div class="line"><span class="built_in">timer</span>.schedule(task, <span class="number">0</span>, ControlData.DELAY_TIME);</div></pre></td></tr></table></figure>

<p>搞定。</p>
]]></content>
    
    
      <category term="Android" scheme="http://gengbiao.me/tags/Android/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[coney主题介绍]]></title>
    <link href="http://gengbiao.me/hexo/coney%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D/"/>
    <id>http://gengbiao.me/hexo/coney主题介绍/</id>
    <published>2014-11-11T16:00:00.000Z</published>
    <updated>2014-12-15T08:44:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="coney主题介绍">coney主题介绍</h1>
<p>coney主题是<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>的一款主题.基于<a href="https://github.com/A-limon/pacman" target="_blank" rel="external">pacman主题</a>的样式改写的。支持不同分辨率的使用。</p>
<p>因为最近一直在不断更新，建议你们可以选择star<a href="https://github.com/coneycode/coney-hexo-theme" target="_blank" rel="external">我的主题</a>，及时得到我的更新通知。<br>最后更新时间： 2014-10-18<br>已经安装的朋友可以选择升级主题:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/coney</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>

<h2 id="安装">安装</h2>
<h3 id="安装-1">安装</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -<span class="keyword">b</span> master http<span class="variable">s:</span>//github.<span class="keyword">com</span>/coneycode/coney themes/coney</div></pre></td></tr></table></figure>

<p><strong>注意：Coney 要求至少在 Hexo 2.4.5 以上.</strong> </p>
<h3 id="使用">使用</h3>
<p>在hexo博客目录下的<code>_config.yml</code>里将 <code>theme</code> 设置成 <code>coney</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme</span>: <span class="string">coney</span></div></pre></td></tr></table></figure>

<h3 id="升级">升级</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/coney</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>

<p><strong>注意升级前备份好<code>theme/coney/_config.yml</code>以防自己的配置丢失</strong> </p>
<h2 id="配置">配置</h2>
<p>配置文件在 <code>/themes/coney/_config.yml</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####菜单</span></div><div class="line">menu:</div><div class="line">  首页: /</div><div class="line">  归档: /archives</div><div class="line"><span class="comment">## 使用标签或者分类需要在你的博客根目录下的`../source`中创建两个文件夹`tags`和`categories`.</span></div><div class="line"><span class="comment">## 然后分别在文件夹下创建文件`index.md`.内容如下，可以直接复制粘贴，注意去掉##：</span></div><div class="line"><span class="comment">##(categories中将tags换成 categories)</span></div><div class="line"><span class="comment">## layout: tags</span></div><div class="line"><span class="comment">## title: tags </span></div><div class="line"><span class="comment">## ---</span></div><div class="line"><span class="comment">#### 平台，即头像下方的需要显示的数据，不想添加的去掉就好</span></div><div class="line">widgets: </div><div class="line">- category  - <span class="comment">##分类使用标签或者分类需要在你的博客根目录下的`../source`中创建两个文件夹`tags`和`categories`.然后分别在文件夹下创建文件`index.md`.内容如下，(categories中将tags换成 categories)可以直接复制粘贴：</span></div><div class="line">layout: tags</div><div class="line">title: tags </div><div class="line"><span class="comment">---</span></div><div class="line">- tag       - <span class="comment">## 标签</span></div><div class="line">- links     - <span class="comment">## 友情链接,你可以修改自己的links在 `/layout/_widget/links.ejs`默认为本人的博客和hexo主页.</span></div><div class="line">- rss       - <span class="comment">## rss订阅</span></div><div class="line">- tagcloud  - <span class="comment">## 标签云</span></div><div class="line"><span class="comment">#### RSS</span></div><div class="line">rss:  atom.xml <span class="comment">## 即你本人的rss地址名称，一般不用更改。</span></div><div class="line"><span class="comment">#### Image</span></div><div class="line">imglogo:    <span class="comment">## 即你名称左边的logo是否显示，本人觉得logo略鸡肋，但是鉴于每个人的审美不同，保留此功能.默认关闭</span></div><div class="line">  enable: <span class="constant">false</span>            <span class="comment">##默认关闭           </span></div><div class="line">  src: img/logo.svg        <span class="comment">##推荐使用`.svg`或者`.png` 将图片放置在 `/coney/source/img`.</span></div><div class="line">favicon: img/favicon.ico   <span class="comment">## 即浏览器标签上显示的图片，大小: 32px*32px,`.ico`  将图片放置在 `/coney/source/img`.</span></div><div class="line"><span class="comment">#### 作者头像</span></div><div class="line">author_img_enable: <span class="constant">true</span> <span class="comment">## 是不是显示作者的头像</span></div><div class="line">author_img: img/coney.png <span class="comment">## 作者头像，size: 220px*220px.</span></div><div class="line"><span class="comment">#### 字体</span></div><div class="line">ShowCustomFont: <span class="constant">true</span>  <span class="comment">## 你可以自定义你的字体,路径在 `/coney/source/css/variable.styl` 和 `/coney/source/css/font.styl`.</span></div><div class="line"><span class="comment">#### 目录</span></div><div class="line">toc:</div><div class="line">  article: <span class="constant">true</span>   <span class="comment">## 是不是在文章中显示目录.如果某一篇文章中你不想显示侧边栏，可以在正文之前 `front-matter`中添加属性`toc: false`.</span></div><div class="line">  aside: <span class="constant">true</span>     <span class="comment">## 是不是在侧边栏中显示目录.</span></div><div class="line"><span class="comment">#### Fancybox</span></div><div class="line">fancybox: <span class="constant">false</span> <span class="comment">##默认关闭，如果你使用Hexo经常发表Gallery类型的文章，那么请设置为true（同时需要复制fancybox.js到你的博客目录下scripts文件夹中）。</span></div><div class="line"><span class="comment">#### 作者信息，就是填写一些作者的相关信息</span></div><div class="line">author:</div><div class="line">  google_plus:    <span class="comment">## e.g. 116338260303228776998 指向 https://plus.google.com/u/0/116338260303228776998</span></div><div class="line">  weibo:      coneylife <span class="comment">## e.g. 436062867 指向 http://weibo.com/436062867</span></div><div class="line">  twitter:    <span class="comment">## e.g. gengbiaosky 指向 https://twitter.com/yangjiansky</span></div><div class="line">  github:     coneycode <span class="comment">## e.g. coneycode 指向 https://github.com/coneycode</span></div><div class="line">  facebook:   <span class="comment">## e.g. gengbiao 指向 https://favebook.com/yangjian</span></div><div class="line">  tsina:      <span class="number">1005055274569156</span> <span class="comment">## e.g. 1664838973  这个是你的微博地址，在分享中其他人会自动@你。</span></div><div class="line">  zhihu:     <span class="comment"># coneylife, 现在知乎还没有icon，我已经提交了icon申请到Font-Awesome，静候佳音，我会第一时间更新.</span></div><div class="line"><span class="comment">#### 评论</span></div><div class="line">duoshuo: </div><div class="line">  enable: <span class="constant">true</span>  <span class="comment">## 多说评论系统，系统默认disqus，但是大陆不好用你懂的。。</span></div><div class="line">  short_name: coney <span class="comment">## 多说的二级域名，比如我的就是coney.duoshuo.com</span></div><div class="line"><span class="comment">#### 分享</span></div><div class="line">jiathis:</div><div class="line">  enable: <span class="constant">false</span> <span class="comment">##  加网分享系统。默认关闭，因为主题已经内置了原生的分享功能。</span></div><div class="line">  id:    <span class="comment">## e.g. 1501277 加网ID. </span></div><div class="line">  tsina: <span class="comment">## e.g. 1664838973 微博ID,会被用在分享功能中自动@你.</span></div><div class="line"><span class="comment">####百度分析</span></div><div class="line">baidu_analytics:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  id: <span class="number">391982416296</span>a0d54221f59fe35250d4 <span class="comment"># 你的百度分析ID</span></div><div class="line"><span class="comment">####百度分享</span></div><div class="line">baidu_share:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  color: <span class="number">4</span> <span class="comment">##百度分享栏的颜色设置，一共有九种颜色，详情在最后面的附录`coney主题的博客颜色更改`</span></div><div class="line"><span class="comment">####主题颜色修改,目前官方还未支持十六进制颜色与String值的转换</span></div><div class="line"><span class="comment">####想更改颜色需要查看最后面附录的`coney主题的博客颜色更改`¬</span></div><div class="line">theme_color: </div><div class="line">    background: <span class="string">"#dddddd"</span>  <span class="comment">#博客背景</span></div><div class="line">    font: <span class="string">"#817c7c"</span>        <span class="comment">#博客字体</span></div><div class="line">    theme: <span class="string">'#ea6753'</span>       <span class="comment">#博客主题颜色</span></div><div class="line">    footer: <span class="string">"#ffffff"</span>      <span class="comment">#博客页脚颜色</span></div><div class="line"><span class="comment">####百度站内搜索 </span></div><div class="line">baidu_search:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  id: <span class="string">'2049782880735612718'</span> <span class="comment">##你的百度站内搜索ID</span></div><div class="line">  site: <span class="keyword">http</span>://search.baidu.com/cse/search  <span class="comment">#http://search.gengbiao.me/cse/search，百度站内搜索url，你可以用自己的地址指向百度默认站内搜索后更改此处。</span></div><div class="line"><span class="comment">####谷歌分析</span></div><div class="line">google_analytics:</div><div class="line">  enable: <span class="constant">true</span></div><div class="line">  id:   <span class="comment">## e.g. UA-55273525-1 谷歌分析ID.*Google Analytics已经升级到了Universal Analytics。请先前往后台升级你的Google Analytics版本后再启用追踪代码,链接地址在下面。</span></div><div class="line">  site: <span class="comment">## e.g.gengbiao.me  谷歌分析的站点，默认会添加本博客。</span></div><div class="line"><span class="comment">####background music </span></div><div class="line">background_music:</div><div class="line">  enable: <span class="constant">false</span></div><div class="line">  src: </div><div class="line"><span class="comment">#### 谷歌站内搜索</span></div><div class="line">google_cse: </div><div class="line">  enable: <span class="constant">false</span>  </div><div class="line">  cx: <span class="number">010584917530731754670</span>:<span class="number">91</span>c2z8qybp0  <span class="comment">## e.g. 010584917530731754670:91c2z8qybp0 你的谷歌搜索ID，但是在大陆经常不能用你懂的。https://www.google.com/cse/ 如果开启此功能，需要在博客根目录的 '/source'中创建文件夹 '/search'，然后在文件夹中创建"index.md"文件。文件内容如下：</span></div><div class="line">layout: search </div><div class="line">title: search</div><div class="line"><span class="comment">---</span></div></pre></td></tr></table></figure>

<p>附录：<br><a href="https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN" target="_blank" rel="external">谷歌分析升级详情</a><br><a href="http://gengbiao.me/hexo/coney%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/" target="_blank" rel="external">coney主题的博客颜色更改</a></p>
]]></content>
    
    
      <category term="主题" scheme="http://gengbiao.me/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[江洋大盗阿蜜蜜]]></title>
    <link href="http://gengbiao.me/novel/%E6%B1%9F%E6%B4%8B%E5%A4%A7%E7%9B%97%E9%98%BF%E8%9C%9C%E8%9C%9C/"/>
    <id>http://gengbiao.me/novel/江洋大盗阿蜜蜜/</id>
    <published>2014-11-10T16:00:00.000Z</published>
    <updated>2014-11-12T04:11:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="江洋大盗阿蜜蜜">江洋大盗阿蜜蜜</h1>
<h2 id="风一般的阿敏敏">风一般的阿敏敏</h2>
<p>秋立，清晨，边陲小镇，远处枯叶飘落。</p>
<p>慵懒的太阳终于爬了出来，将第一缕光明洒向了这个边陲小城，远处的街道上，稀稀落落的行人不知道起这么早，要赶去何方；远处的天空中，南迁的大雁还在不倦的前行，好像一点都不觉得累。</p>
<p>画面切换到了小城的一户人家中，随着太阳的慢慢升起，十度的晨光终于照进了三十尺的院子里，当第一缕光明轻抚屋檐下的那三只小鸟时，小鸟欢快的啼叫了两声，唤醒了屋里辰时正眠的梦中人。</p>
<p>只见床上的人伸了伸懒腰，拖着三十六度半的身子，看了看窗外的晴天，心想着充满希望的一天开始了，然后随手抓起了自己的鞋，砸向了外面聒噪的小鸟，转身换了个姿势又睡着了。</p>
<p>远处乌鸦飞过。</p>
<p>嘎~嘎~嘎~</p>
<p>今天屋里的人准备去官府登记的，所以她格外享受这最后一天身为编外江洋大盗的自由。</p>
<p>“阿敏敏，外婆叫你去她家吃饭！”不知道从哪里传出了一句声响，扰乱了屋里的平静。只见床上的人伸了伸懒腰，拖着三十六度半的身子，心想着充满希望的一天开始了，然后随手抓起了自己的另一只鞋，快速的穿在了脚上。</p>
<p>“吃饭了吃饭了~药药切克闹~”一边穿衣服一边捡鞋，迅速冲了出去。</p>
<p>如果你有幸站在门口，就会看到一个风一般的女子风一般的冲了出去，不知情的人看她的奔跑速度还以为是城北得月庄在打折促销。</p>
<p>这年头在城里，如果你看到一堆女人围在得月庄门口，还有一批女人正在大街上风一般的往城北赶，那八成是城北的得月庄在宣传打折促销活动；如果你看到一堆男人围在得月庄门口，还有一批男人正在大街上风一般的往城北赶，那八成是城北的得月庄又来了漂亮的女姬；如果你看到一堆男人和女人围在得月庄门口，还有一批男人和女人正在大街上风一般的往城北赶，那八成是城北的得月庄又来了漂亮的女姬在宣传打折促销活动。</p>
<p>当然小城的百姓也习惯了一种情况，那就是城南的阿敏敏风一般地跑去城北的外婆家吃饭。</p>
<p>是的，刚才提到的那个风一般的女子叫阿敏敏。不过这是她作为江洋大盗的艺名，至于她的真名得去问从小和她一起长大的她四姑的邻居的三叔的后邻家的小青了，因为小青已经搬到了五十里外的襄阳城，所以阿敏敏的真名至今是个谜。</p>
<p>当然她还没有意识到，今天不仅是她编外江洋大盗的最后一天，还是她用阿敏敏这个艺名的最后一天。</p>
<h2 id="做一个有情怀的贼">做一个有情怀的贼</h2>
<p>阿敏敏一边吃着外婆的饭，一边跟外婆说：<br>“外婆，我今天要去官府登记，马上就要做一名在编的贼，做一名有情怀的江洋大盗。”</p>
<p>是的，最近地方官府响应朝廷“建设有天朝特色的封建王朝”的伟大号召，推行了一系列政策，其中就包括盗贼登记在案，方便管理这一条。呼吁大家听从朝廷调遣，合理工作，学习六扇门总捕头冷风的“三抢三不抢”先进思想，于是众多盗贼纷纷去登记注册，由一名持刀抢劫的盗贼变成了一名，额，怎么说呢，变成了一名登记在案的持刀抢劫盗贼。</p>
<p>茶余饭饱之后，阿敏敏摸了摸被撑到的肚子，心满意足的往官府走去。心想自己以后就是政府在编人员了，也算是半个公务员了吧，以后一定要做一名静静的女子，本本分分地去抢劫。</p>
<p>想到这里，阿敏敏摸了摸圆鼓鼓的肚子，又开心的笑了。</p>
<p>“喂，别站在门口挡路！”不知不觉中阿敏敏已经走到了官府，正巧有人出来，凶巴巴地冲她喊。</p>
<p>阿敏敏的火一下子起来了，尼玛怎么跟老娘说话呢，晚上去把你家抢了~，不过阿敏敏转念一想，不能激动，不能激动，老娘是个有情怀的贼，不跟他一般见识。</p>
<p>“我是来做盗贼登记的。”阿敏敏一脸谦逊的表情。</p>
<p>“那右拐，去登记处，不在大门这。”衙役说完头都不看的走了。</p>
<p>阿敏敏望着他嚣张的背影，抖了抖刚才从他身上偷来的工牌，心想这个头脑简单四肢发达的货，然后顺手把工牌给扔口袋里了—老娘可是个有情怀的贼，这工牌拿手上太难看了。</p>
<p>对，要做一个有情怀的贼，做一名静静的女子。想到这里阿敏敏又整了整衣衫，一小步一小步的往登记处挪去。</p>
<p>半个时辰后，登记处。</p>
<p>画面从门口拉近，只见一名彪悍的女子突然站起来一拍桌子。</p>
<p>“什么？阿敏敏已经被登记过了？！谁胆子这么大，老娘的艺名都敢登记！是不是不想混了！衙役，告诉老娘他是谁？诶，衙役人呢？衙役你钻桌子下面干什么，我这么安静的女子又不会吃了你，嘿，你出来啊，还在下面干什么，赶紧给老娘滚出来！”</p>
<p>阿敏敏从颤颤巍巍的衙役手中拿到了名单：“阿敏敏，襄阳人，于月前迁至洛城城北洛神弄堂44号，职业：盗贼。”</p>
<p>“敢抢老娘的名号，老娘盯上你了！”</p>
<p>说完阿敏敏就要往外走。</p>
<p>“那，那你还登记么？”</p>
<p>“对哈，”想到这里阿敏敏马上安静下来了，“我是来登记的，登记了以后就可以做一名静静的女子了，登记，为什么不登记！”</p>
<p>“那你叫什么名字？”</p>
<p>“额，就写阿蜜蜜吧，我这么大度的江洋大盗才不会为了这么一个破名斤斤计较呢，他肯定知道老娘声明在外抢注了我的名号，”阿敏敏一边想着一边思考着如何找这个人算账。</p>
<p>“盗贼泥煤啊，”阿敏敏又一巴掌拍到桌子上，“老娘是江洋大盗！才不是小偷小摸的小毛贼，职业这给老娘改过来！”</p>
<p>于是，阿敏敏终于变成了一名登记在案的江洋大盗，当然，现在应该叫阿蜜蜜了。</p>
<hr>
<p>未完待续。</p>
]]></content>
    
    
      <category term="江洋大盗阿蜜蜜" scheme="http://gengbiao.me/tags/%E6%B1%9F%E6%B4%8B%E5%A4%A7%E7%9B%97%E9%98%BF%E8%9C%9C%E8%9C%9C/"/>
    
      <category term="小说" scheme="http://gengbiao.me/categories/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何阅读别人的代码]]></title>
    <link href="http://gengbiao.me/technique/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E5%88%AB%E4%BA%BA%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>http://gengbiao.me/technique/如何阅读别人的代码/</id>
    <published>2014-11-10T16:00:00.000Z</published>
    <updated>2014-11-12T04:10:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="如何阅读别人的代码">如何阅读别人的代码</h1>
<h2 id="首先要能运行起来">首先要能运行起来</h2>
<p>本人一般都是先想办法让代码运行起来，只有这样，当我对代码做更改的时候，才能通过程序的变化直观的看到我更改的这部分代码究竟是负责哪一部分的。</p>
<p>个人经验表示，github上只要是靠谱点的开源项目都会在README里面写上如何部署的。我一般发现README写的不太好的，都是先去找找别的，实在找不到了才会回来看这个。</p>
<p>比如碰到某个输出函数你不知道到底执行在哪个部分，可以直接改掉里面的输出，再运行程序，发现你设置的输出在哪里粗线了(就是这就是这~)，就找到了这句话的执行区间了。</p>
<p>比如你还可以注释掉一些代码，看看程序有什么反应，是崩溃了还是哪些地方消失了。如果你注释掉一部分代码，发现程序数据不更新了，那就可以判断出这部分代码是跟数据更新有关的，如果程序崩溃了，那看看在哪down掉了，那你注释的那部分代码就在这个地方被使用了。等等。</p>
<h2 id="要有一个全局搜索的工具">要有一个全局搜索的工具</h2>
<p>我一般用的是sublime，感觉蛮好用的。它的作用是只要你有一丝线索，就可以迅速定位到你想要的地方。你自己还可以折腾下安装sublime的tag插件，就可以很方便的从函数调用的地方跳到函数定义的地方。</p>
<p>这个方法还是满通用的。</p>
<p>比如android，我clone下来一个网络异步的库volley，但是我觉得他这个库对json支持的达不到我的要求。我想自己更改，那第一步肯定是用sublime打开源码，搜索Json。就可以把范围缩小到局部了。</p>
<p>比如node.js，我想研究下hexo的git push，那我直接用sublime打开源码，搜索git就可以直接把范围缩小很多了。</p>
<p>比如前端我用到了DataTable，但是我觉得他的排序不满足我的需求。那我可以直接用“sort”关键词搜索他的源代码，定位出排序算法，接下来就可以慢慢改了。不然2W多行的源代码，岂不是疯了-_-!</p>
<p>再进一步，可能我不太清楚某个函数的用法与用处，我直接用sublime搜索这个函数名，所有调用到这个函数的代码就在我眼前了，接下来我就可以研究这个函数到底在程序中如何使用了。</p>
<h2 id="学会注释与修改">学会注释与修改</h2>
<p>这个其实就是第一步说的。程序跑不起来很多东西都不能确定，你甚至不知道是对是错。</p>
<h2 id="多用搜索引擎与官网文档">多用搜索引擎与官网文档</h2>
<p>其实不光是github开源代码，读别人的代码都需要多用搜索。因为很多时候如果源代码的注释不到位，你读起来是很费劲的。这个时候搜索引擎就很重要了。</p>
<p>比如我前一阵尝试iOS的时候，第一次看到block这个东西，根本就不懂这是什么代码怎么能读明白，于是直接粘到谷歌里看了。</p>
<p>比如有时候别人对代码做封装了，你看到的函数根本就不是原生的，但是你刚读可能不知道，完了你又看不太懂，这个时候你可以直接去搜谷歌或者developer center，比如我前一阵看别人源码看到了这个：<br>[self performDelay:0.5 block:^{}];</p>
<p>谷歌后发现丫根本找不到这个函数是啥。那请不要慌，多半是因为这个函数根本就是项目作者自己封装的。（有iOS大神可能会文你为毛不command直接进去看，求大神们不喷，我就是举个例子。）</p>
<h2 id="新手不建议直接通读源码">新手不建议直接通读源码</h2>
<p>本人作为一个开发没多久的程序猿，水平一般，所以读开源项目的时候很多代码根本通读不能，所以我一般都是用上面的这些方法，从功能入手，一点点研究，慢慢吃透整个项目。</p>
]]></content>
    
    
      <category term="学习" scheme="http://gengbiao.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js开发的常用模块总结]]></title>
    <link href="http://gengbiao.me/node.js/node.js%E5%BC%80%E5%8F%91%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93/"/>
    <id>http://gengbiao.me/node.js/node.js开发的常用模块总结/</id>
    <published>2014-10-21T16:00:00.000Z</published>
    <updated>2014-11-12T04:09:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Node-js开发的常用模块总结">Node.js开发的常用模块总结</h1>
<p>因为玩hexo的静态blog的原因，为了满足自己的需求，学了学node.js，自己动手写了<a href="">几个hexo的插件</a>。开发告一段落，估计过两个星期就把node.js忘了，跑来总结下。</p>
<h2 id="console">console</h2>
<p>console模块是Node提供的核心模块，提供基本的输出功能。虽然node.js采用的js语法，但是你千万不要在node.js使用alert进行调试，那是浏览器带的全局方法，会报错的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">console.log([format],<span class="keyword">...</span>) <span class="comment">##向控制台输出日志，类似的API还有info() err() warn()，</span></div><div class="line">                          <span class="comment">##格式有%s,%d,%j(json格式)</span></div><div class="line">console.info()</div><div class="line">console.warn()</div><div class="line">console.error()           <span class="comment">##与console.log()差不多</span></div><div class="line">    e.g. </div><div class="line">    console.log(<span class="string">'%s,%d,%j'</span>,<span class="string">'hello world'</span>,<span class="number">0</span>,{name:<span class="string">'coney'</span>,Sexy:<span class="string">'Male'</span>,age:<span class="number">18</span>,do:[<span class="string">'hexo'</span>,<span class="string">'node.js'</span>,<span class="string">'themes'</span>]});</div><div class="line">    <span class="comment">##输出：</span></div><div class="line">    hello world,<span class="number">0</span>,{<span class="string">"name"</span>:<span class="string">"coney"</span>,<span class="string">"Sexy"</span>:<span class="string">"Male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"do"</span>:[<span class="string">"hexo"</span>,<span class="string">"node.js"</span>,<span class="string">"themes"</span>]}</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.dir(object)       ##利用util.inspect()输出对象的分析</div><div class="line">	e.g.</div><div class="line">	<span class="keyword">var</span> Hexo = <span class="function"><span class="keyword">function</span><span class="params">(root,theme,version)</span>  </span></div><div class="line">	{  </div><div class="line">  		<span class="keyword">this</span>.root=root;  </div><div class="line">  		<span class="keyword">this</span>.themes=theme;  </div><div class="line">  		<span class="keyword">this</span>.version=version;</div><div class="line">	};  </div><div class="line">	<span class="keyword">var</span> myBlog = <span class="keyword">new</span> Person(<span class="string">'Users/workspace'</span>,<span class="string">'coney'</span>,<span class="number">1.0</span>);  </div><div class="line">	<span class="built_in">console</span>.dir(myBlog);  </div><div class="line">	<span class="built_in">console</span>.dir(Hexo); </div><div class="line">    ## 输出</div><div class="line">    {root: <span class="string">'Users/workspace'</span>, theme:<span class="string">'coney'</span>, version: <span class="number">1.0</span>}</div><div class="line">    [<span class="built_in">Function</span>]</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time(tag) </div><div class="line"><span class="built_in">console</span>.timeEnd(tag)      <span class="comment">##配合time() 生成一个测时器，并输出其间隔的时间</span></div><div class="line">                          <span class="comment">##time和timeEnd中不要输入中文，</span></div><div class="line">                          <span class="comment">##time和timeEnd中输入的参数要一致</span></div><div class="line">	e.g.</div><div class="line">	<span class="reserved">var</span> tag = <span class="string">'the time-consuming of sum operate'</span>;</div><div class="line">	<span class="built_in">console</span>.time(tag);</div><div class="line">	<span class="reserved">var</span> sum=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="reserved">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)</div><div class="line">	{</div><div class="line">		sum+=i;</div><div class="line">	}</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'sum=%d'</span>,sum);</div><div class="line">	<span class="built_in">console</span>.timeEnd(tag);</div><div class="line">	<span class="comment">##输出:</span></div><div class="line">		sum=<span class="number">49995000</span></div><div class="line">		the time-consuming <span class="keyword">of</span> sum <span class="attribute">operate</span>: <span class="number">9</span>ms</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.<span class="keyword">assert</span>(expr,msg)  <span class="comment">##若expr为假，则输出msg</span></div><div class="line">	e.g.</div><div class="line">	console.<span class="keyword">assert</span>(<span class="number">1</span>==<span class="number">2</span>,<span class="string">'above is wrong'</span>); </div><div class="line">	<span class="comment">##输出</span></div><div class="line">	AssertionError,above <span class="keyword">is</span> wrong</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="keyword">trace</span>(tag)        <span class="preprocessor">##输出当前的栈信息</span></div></pre></td></tr></table></figure>

<h2 id="URL与QueryString">URL与QueryString</h2>
<p>这两个模块是Node提供的核心模块，用于处理URL及URL中的查询串。通常情况下，不需要直接处理querystring，因为url模块的支持。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">url.parse(url,qs,sl)  </div><div class="line">					<span class="preprocessor">##将url解析为一个对象，其中包含host,hostname,port等字段，</span></div><div class="line">					<span class="preprocessor">##若qs为true，则调用querystring解析查询串</span></div><div class="line">url.<span class="built_in">format</span>(obj)        </div><div class="line">					<span class="preprocessor">##将obj生成为一个url字符串</span></div><div class="line">querystring.stringify(obj,<span class="string">'sep'</span>,<span class="string">'eq'</span>)  </div><div class="line">					<span class="preprocessor">##将对象obj生成查询串</span></div><div class="line">querystring.parse(str) </div><div class="line">					<span class="preprocessor">##解析查询串为对象</span></div></pre></td></tr></table></figure>

<h2 id="Path与File_System">Path与File System</h2>
<p>Path模块则提供了对路径名称的一些便捷操作，其将输入串作为路径栈来处理，与物理文件系统无关。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">path.normalize(<span class="string">'path'</span>)   <span class="comment">##处理path中的' . '与'..'</span></div><div class="line">path.join(<span class="operator">a</span>,b,..z)  	  <span class="comment">##处理为a/b/.../z，并对结果执行normalize</span></div><div class="line">path.resolve(<span class="operator">a</span>,b,...z)   <span class="comment">##对每个元素执行cd item，返回最终结果</span></div><div class="line">path.<span class="built_in">relative</span>(<span class="operator">a</span>,b)       <span class="comment">##返回b对于a的切换方式，可包含'.'与'..'</span></div><div class="line">path.dirname(path)       <span class="comment">##path.basename(path,'mask') 返回路径的目录部分与文件名部分</span></div><div class="line">path.extname(path)       <span class="comment">##返回路径的扩展名部分</span></div><div class="line">path.seq                 <span class="comment">##OS特定的路径分隔符 "\\" 或  "/"</span></div></pre></td></tr></table></figure>

<p>File System提供了对文件与目录的创建、删除、权限设置，并以及文件的打开、读写与关闭。文件API提供两套接口，分别支持同步与异步调用。区别是，同步情况异常会立即抛出，需要用try-catch捕获，而在异步情况下，异常会传递给回调函数处理。值得注意的是异步情况下，不同的事件的完成顺序是未决的，因而对于有顺序的操作，最好在函数的事件链中去完成。由于同步操作与POSIX同名调用类似，因此这里只介绍异步接口。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">fs.rename(oldPath, newPath, [<span class="keyword">callback</span>])   </div><div class="line">									<span class="preprocessor">##修改名字，回调函数为function(exception) {}</span></div><div class="line">fs.truncate(fd, len, [<span class="keyword">callback</span>])   <span class="preprocessor">##截断文件</span></div><div class="line">fs.chown(path, uid, gid, [<span class="keyword">callback</span>])  </div><div class="line">fs.fchown(fd, uid, gid, [<span class="keyword">callback</span>])  </div><div class="line">								  	<span class="preprocessor">##修改文件所属</span></div><div class="line">fs.chmod(path, mode, [<span class="keyword">callback</span>]) </div><div class="line">fs.fchmod(fd, mode, [<span class="keyword">callback</span>]) </div><div class="line">									<span class="preprocessor">##修改文件权限</span></div><div class="line">fs.stat(path, [<span class="keyword">callback</span>])   </div><div class="line">fs.lstat(path, [<span class="keyword">callback</span>])  </div><div class="line">fs.fstat(fd, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##返回文件stat，回调为function(err,state) {}</span></div><div class="line">fs.link(srcpath, dstpath, [<span class="keyword">callback</span>])  </div><div class="line">fs.symlink(srcpath, dstpath, [type], [<span class="keyword">callback</span>]) </div><div class="line">							<span class="preprocessor">##创建链接与符号链接</span></div><div class="line">fs.readlink(path, [<span class="keyword">callback</span>]) </div><div class="line">							<span class="preprocessor">##读取link的内容</span></div><div class="line">fs.unlink(path, [<span class="keyword">callback</span>])</div><div class="line">							<span class="preprocessor">##取消link</span></div><div class="line">fs.rmdir(path, [<span class="keyword">callback</span>])   </div><div class="line">fs.mkdir(path, [mode], [<span class="keyword">callback</span>])</div><div class="line">							<span class="preprocessor">##目录创建与删除</span></div><div class="line">fs.readdir(path, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##读取目录内容  回调为function(err,files) {}</span></div><div class="line">fs.open(path, flags, [mode], [<span class="keyword">callback</span>])    </div><div class="line">							<span class="preprocessor">##回调为function(err,fd) {}</span></div><div class="line">fs.write(fd, buffer, offset, length, position, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##回调为function(err,len,buf) ;</span></div><div class="line">fs.read(fd, buffer, offset, length, position, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##回调为function(err,len,buf) ;</span></div><div class="line">fs.close(fd, [<span class="keyword">callback</span>])</div><div class="line">fs.utimes(path, atime, mtime, [<span class="keyword">callback</span>])  </div><div class="line">fs.futimes(fd, atime, mtime, [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##修改文件的访问时间与修改时间</span></div><div class="line">fs.fsync(fd, [<span class="keyword">callback</span>]) </div><div class="line">fs.readFile(filename, [encoding], [<span class="keyword">callback</span>])     </div><div class="line">							<span class="preprocessor">##高层接口，回调为function(err,data)</span></div><div class="line">fs.writeFile(filename, data, [encoding], [<span class="keyword">callback</span>])  </div><div class="line">							<span class="preprocessor">##高层接口，回调为function(err)</span></div><div class="line">fs.appendFile(filename, data, encoding=<span class="string">'utf8'</span>, [<span class="keyword">callback</span>])</div><div class="line">fs.createReadStream(path,[opt]) </div><div class="line">fs.createWriteStream(path,[opt]) 从路径创建输入与输出流</div></pre></td></tr></table></figure>

<h2 id="Stream">Stream</h2>
<p>Stream是Node实现的一种面向流处理的接口，支持文件流、HTTP数据流、标准IO流等进行抽象操作。<br>Stream分为readStream与writeStream两种类型<br>read stream 定义了下列事件 data,end,error,close 用于在底层处理流的过程中回调用户的事件监听器。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span>Encoding(<span class="string">'charset'</span>)  <span class="comment">##设置流的字符编辑，默认为utf-8</span></div><div class="line">pause() resume() 		</div><div class="line">						<span class="comment">##暂停与恢复流处理，需要注意的是有些底层处理并不能立即生效,						##在pause一段时间内仍会抛出data事件</span></div><div class="line">destroy()       		<span class="comment">##在流处理结束后，释放流使得底层可以关闭文件</span></div><div class="line">pipe(dstream,[opt])     <span class="comment">##将输入流复制到目标输出流</span></div></pre></td></tr></table></figure>

<p>writable Stream定义了下列事件： </p>
<p>drain,error,close,pipe 用于底层在处理流的过程中回调用户的事件监听器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">write</span><span class="params">(string,[charset])</span>  </span></div><div class="line"><span class="title">write</span><span class="params">(buff)</span> 写入输出流</div><div class="line"><span class="title">end</span><span class="params">()</span>  </div><div class="line"><span class="title">end</span><span class="params">(string,encoding)</span> <span class="title">end</span><span class="params">(buf)</span> 定稿输出流并写入EOF</div><div class="line"><span class="title">destory</span><span class="params">()</span>/<span class="title">destroySoon</span><span class="params">()</span>  关闭底层资源，后者后将写入缓存区写空后释放。</div></pre></td></tr></table></figure>

<h2 id="定时器">定时器</h2>
<p>定时器操作被导出到全局命名空间中，不需要单独包含</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">setTimeout</span>(callback, delay, <span class="attr_selector">[arg...]</span>)   设置超时执行</div><div class="line"><span class="function">clearTimeout</span>(timeoutId)    </div><div class="line"><span class="function">setInterval</span>(callback, delay, <span class="attr_selector">[arg...]</span>)    设置间隔执行</div><div class="line"><span class="function">clearInterval</span>(intervalId)</div></pre></td></tr></table></figure>

<h2 id="child_process">child process</h2>
<p>此模块提供了操作子进程以及与进程间通信的基本功能。这个模块提供执行子进程的四种方式，并返回子进程的抽象，ChildProcess类型的实例。子进程类型其实是一个事件发生器，其上定义了子进程生命周期中的各种事件，如exit, close, message,disconnect事件。实例可以取到对应进程的相关属性如标准输入、输出、错误、进程ID，此外还提供了对进程发送消息的接口send,kill()和disconnect()。</p>
<h3 id="创建进程">创建进程</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">spawn(cmd, [args,<span class="keyword">...</span>], [opt])  </div><div class="line">                             <span class="comment">##基于cmd命令执行一个子进程，命令的参数为args，若无则为空</span></div><div class="line">                             <span class="comment">##数据。option={cwd, stdio, customFds, </span></div><div class="line">                             <span class="comment">##env, detatched}</span></div><div class="line">exec(cmd,[opt],callback )    </div><div class="line">                             <span class="comment">##基于cmd命令执行子进程，命令参数为空格分隔。回调的原型为</span></div><div class="line">                             <span class="comment">##function(err,stdout, stderr) {}。</span></div><div class="line">                             <span class="comment">##option={cwd, stdio, customFds, env,encoding,</span></div><div class="line">                             <span class="comment">##timeout,maxBuffer,killSignal}</span></div><div class="line">execfile(file , [args,<span class="keyword">...</span>], [opt],callback)  </div><div class="line">                             <span class="comment">##对于非shell命令的程序，可以通过execfile来执行，</span></div><div class="line">                             <span class="comment">##回调函数原型为function(err,stdout, stderr) {}。</span></div><div class="line">                             <span class="comment">##option={cwd, stdio, customFds, env,encoding,</span></div><div class="line">                             <span class="comment">##timeout,maxBuffer,killSignal}</span></div><div class="line">fork(module, [args,<span class="keyword">...</span>],[opt])  </div><div class="line">                             <span class="comment">##在子进程中执行一个node模块。</span></div><div class="line">                             <span class="comment">##option={cwn,env,encoding}.</span></div></pre></td></tr></table></figure>

<h3 id="选项说明">选项说明</h3>
<ol>
<li><p><code>cwd</code>:当前工作区</p>
</li>
<li><p><code>env</code>: 进程执行环境</p>
</li>
<li><p><code>stdio</code>: 一个数组，数组每个位置对应子进程的一个文件fd，每个位置的值可能为pipe, ipc,ignore,stream obj, null, 正数。pipe表示创建一个父子间的管道，父进程可以通过child_process.stdio[fd]来获取写入端。IPC，创建一个IPC信道。可以使用send()来向此文件fd进行消息的传递，并在接受方引发on(‘message’)事件。 ignore：忽略IO，重定向到/dev/null。</p>
</li>
<li><p><code>Stream obj</code>:在进程间共享一个re/wt 流对象，以操作子进程的TTY,FILE,PIPE,SOCKET等。正整数：其值表示在父进程中打开的文件fd，共享给子进程。null，使用默认值。0,1,2为pipe，&gt;3的为ignore。为了方便书写， node定义了三个数组，’ignore’，’pipe’，’inherit’，分别表示对于0-2的文件进行相应的操作<br>例如，如果想让子进程直接使用父进程的输出，可以require(‘child_process’).spawn(‘ls’,[ ],{stdio:‘inherit’});</p>
</li>
<li><p><code>detached</code>:让子进程成为新进程组的首进程，从而在父进程退出后仍可继续执行。默认情况下父进程会等子detached进程的结束，可以通过child.unref()来避免这种等待。尽管如此，若希望子进程正常执行，仍需要将子进程与父进程的控制终端相剥离。</p>
</li>
<li><p><code>timeout</code>:若&gt;0，则在执行超时后由选项指定的信号终止。</p>
</li>
<li><p><code>killSignal</code>:指定期望接收的终止信号</p>
</li>
<li><p><code>maxBuffer</code>:指定标准输出和错误的最大数据量，超出后子进程被kill</p>
</li>
</ol>
<h3 id="ChildProcess对象">ChildProcess对象</h3>
<p>本类是子进程的抽象对象，支持以下操作和属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span>(signal)   </div><div class="line">			<span class="comment">##使用信号终止进程</span></div><div class="line"><span class="built_in">send</span>(msg, [sendHandler])  </div><div class="line">			<span class="comment">##这里需要注意的是，在父进程中调用send()的事件会被子进程注册的事件处理</span></div><div class="line">			<span class="comment">##函数处理，而在子进程中给自己send()会触发在父进程中注册的事件处理函数。</span></div><div class="line">disconnect()</div><div class="line"><span class="keyword">stdin</span>,<span class="keyword">stdout</span>,<span class="keyword">stderr</span>,  Readable Stream或Writable Stream</div><div class="line">pid：</div><div class="line">    <span class="comment">##子进程的PID</span></div><div class="line"><span class="comment">##子进程在执行过程中会触发以下事件：</span></div><div class="line">exit：</div><div class="line">    <span class="comment">##进程终止时触发。回调function(code,signal) ，若进程正常结束，则code为执行进程的</span></div><div class="line">    <span class="comment">##退出码，否则为null。若进程由信号终止，则signal为收到的信号。</span></div><div class="line"><span class="built_in">close</span>：</div><div class="line">	<span class="comment">##进程的 stdio流结合时触发</span></div><div class="line">disconnect：</div><div class="line">	<span class="comment">##调用dieconnect()后触发，调用后不可以再向子进程发送消息，可以检查</span></div><div class="line">	<span class="comment">##child.connected属性</span></div><div class="line">message：</div><div class="line">	<span class="comment">##在调用send()后触发，function(msg,sendHandler){}</span></div><div class="line">	<span class="comment">##sH可能为socket对象，或server对象。</span></div></pre></td></tr></table></figure>

<h2 id="global">global</h2>
<p>全局空间可以访问console,process,buffer,timer模块，不需要require<br>console与timer在上面已有说明，process提供了node执行进程的运行环境、参数、进程的gid,uid,运行时间等等，具体可以查找process模块</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">__filename</span> <span class="comment">##当前执行脚本的文件名</span></div><div class="line">__dirname  <span class="comment">##当前执行脚本的所在目录</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="node.js" scheme="http://gengbiao.me/tags/node-js/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[coney主题的博客颜色更改]]></title>
    <link href="http://gengbiao.me/hexo/coney%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A2%9C%E8%89%B2%E6%9B%B4%E6%94%B9/"/>
    <id>http://gengbiao.me/hexo/coney主题的博客颜色更改/</id>
    <published>2014-10-15T16:00:00.000Z</published>
    <updated>2014-11-12T04:08:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="coney主题">coney主题</h1>
<p>因为最近一直在不断更新，建议你们可以选择star<a href="https://github.com/coneycode/coney" target="_blank" rel="external">我的主题</a>，及时得到我的更新通知。<br>最后更新时间： 2014-10-18<br>已经安装的朋友可以选择升级主题:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/coney</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>

<h2 id="主题颜色更改">主题颜色更改</h2>
<h3 id="依赖">依赖</h3>
<p>目前官方还未支持十六进制颜色与String值的转换,所以需要手动添加依赖包，本人已经向作者提交了issue，该问题估计稍后会解决</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##在博客的目录下输入下面指令</span></div><div class="line"><span class="built_in">cd</span> node_modules/hexo-renderer-stylus </div><div class="line"><span class="built_in">sudo</span> npm install stylus@<span class="number">0.49</span>.<span class="number">2</span>  <span class="comment">#根据系统文件的权限不同，有的不需要加sudo,这里默认没有写权限，需要用管理员权限执行指令</span></div></pre></td></tr></table></figure>

<h3 id="更改主题颜色">更改主题颜色</h3>
<p>在hexo博客目录下的<code>_config.yml</code>的 <code>theme_color</code>下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme_color</span>: <span class="string"></span></div><div class="line">    <span class="attribute">background</span>: <span class="string">"#dddddd"  #博客背景</span></div><div class="line">    <span class="attribute">font</span>: <span class="string">"#817c7c"        #博客字体</span></div><div class="line">    <span class="attribute">theme</span>: <span class="string">'#ea6753'       #博客主题颜色</span></div><div class="line">    <span class="attribute">footer</span>: <span class="string">"#ffffff"      #博客页脚颜色</span></div></pre></td></tr></table></figure>

<h3 id="更改百度分享颜色">更改百度分享颜色</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">baidu_share:¬</div><div class="line">   enable: <span class="literal">true</span></div><div class="line">   color: <span class="number">4</span> <span class="comment">##百度分享栏的颜色设置，一共有九种颜色,详情见下图</span></div></pre></td></tr></table></figure>

<p><img src="/img/hexo/baidu_share.png" alt="baidu_item_color"></p>
<p>按图示，从左到右分别是<br>第一行 0 | 1 | 2 | 3 | 4<br>第二行 5 | 6 | 7 | 8</p>
<p>稍后还会公开更多的颜色配置给大家。</p>
]]></content>
    
    
      <category term="主题" scheme="http://gengbiao.me/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="DIY" scheme="http://gengbiao.me/tags/DIY/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git_分支_合并_自定义合并项]]></title>
    <link href="http://gengbiao.me/git/git_%E5%88%86%E6%94%AF_%E5%90%88%E5%B9%B6_%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E5%B9%B6%E9%A1%B9/"/>
    <id>http://gengbiao.me/git/git_分支_合并_自定义合并项/</id>
    <published>2014-10-15T16:00:00.000Z</published>
    <updated>2014-11-12T04:08:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git_分支">git 分支</h1>
<h2 id="github_分支的相关指令">github 分支的相关指令</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git branch <span class="comment">#列出本地存在的分支</span></div><div class="line">git branch -r <span class="comment">#列出远程存在的分支</span></div><div class="line">git branch <span class="operator">-a</span> <span class="comment">#列出远程和本地存在的分支</span></div><div class="line">git branch &lt;文件名&gt; <span class="comment">#创建一个新分支，比如 git branch aa ,创建了一个aa的分支.</span></div><div class="line">git branch -m oldbranch newbranch <span class="comment">#重命名分支，如果需要强制重命名用大写的-M.</span></div><div class="line">git branch <span class="operator">-d</span> branchname <span class="comment">#删除branchname分支,如果需要强制重命名用大写的-D.</span></div><div class="line">git branch <span class="operator">-d</span> -r branchname <span class="comment">#删除远程branchname分支</span></div></pre></td></tr></table></figure>

<h3 id="github_分支的切换">github 分支的切换</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout branchname <span class="comment">#切换到某分支下，如 git checkout aa,即切换到了aa 分支下</span></div><div class="line">git checkout -b newbranch <span class="comment"># 创建新分支，并跳到该分支下</span></div></pre></td></tr></table></figure>

<p>搞定。</p>
<h3 id="github_分支的合并">github 分支的合并</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">merge</span> branchname <span class="comment">#把当前分支与指定分支合并 </span></div><div class="line">    e.g. git <span class="built_in">merge</span> aa <span class="comment">#将当前分支与分支名为aa的分支合并</span></div><div class="line">git <span class="built_in">merge</span> branchname1 branchname2 <span class="comment">#把当前分支与指定多个分支合并 </span></div><div class="line">    e.g. git <span class="built_in">merge</span> aa bb <span class="comment">#将当前分支与分支名为aa和bb的的分支合并</span></div></pre></td></tr></table></figure>

<h3 id="忽略某些文件的合并">忽略某些文件的合并</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git checkout aa  #切换到分支aa</div><div class="line">vim .gitattributes #创建.gitattributes文件并用vim打开</div><div class="line">config.yml merge=ours. #将前面这句话写入.gitattributes</div><div class="line"><span class="attribute">:wq #在vim的命令行下敲入:wq,</span> 保存并退出vim.</div><div class="line">git add .gitattributes  #add 该文件</div><div class="line">git commit -m "your commit" #commit 该文件</div></pre></td></tr></table></figure>

<p><code>config.yml merge=ours</code>这句话的意思是当合并时，如果与其他分支的config.yml文件发<br>生冲突，取消合并，使用当前分支下的config.yml文件.<br>然后切换到另一个想要合并的分支B中重复刚才的操作。<br>最后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="operator"><span class="keyword">merge</span> 分支名</span></div></pre></td></tr></table></figure>

<p>大功告成!</p>
<h3 id="合并指定文件">合并指定文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout branchname -- file1 file2 etc <span class="comment">#合并分支里制定的文件</span></div><div class="line">    e.g. git checkout aa -- file1 file2 <span class="comment">#将当前分支的file1 file2 与分支名为aa下的file1 file2文件合并</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="git" scheme="http://gengbiao.me/tags/git/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[terminal 常见指令汇总]]></title>
    <link href="http://gengbiao.me/Terminal/terminal_%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://gengbiao.me/Terminal/terminal_终端常用指令/</id>
    <published>2014-10-12T16:00:00.000Z</published>
    <updated>2014-11-12T04:08:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Terminal_终端常用指令">Terminal 终端常用指令</h1>
<h2 id="文件操作">文件操作</h2>
<h3 id="添加文件/文件夹">添加文件/文件夹</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> touch filename <span class="comment">#添加文件 </span></div><div class="line">      e.g. touch aa.md  <span class="comment">#添加文件名为aa的markdown文件</span></div><div class="line">      e.g. touch aa.txt  <span class="comment">#添加文件名为aa的文本文件</span></div><div class="line"><span class="keyword">mkdir</span> folderName <span class="comment">#添加文件夹</span></div><div class="line">      e.g. <span class="keyword">mkdir</span> aa  <span class="comment">#添加名为aa的文件夹</span></div></pre></td></tr></table></figure>

<h3 id="重命名|移动_文件/文件夹">重命名|移动 文件/文件夹</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mv oldname newname <span class="comment">#重命名文件/文件夹</span></div><div class="line">   e.g. mv <span class="operator">a</span> b <span class="comment">#将a的名称更改为b</span></div><div class="line">mv FilePath newPath <span class="comment">#移动文件,注意，如果不是当前目录下的子目录，要写绝对路径</span></div><div class="line">   e.g. mv aa.txt /usr/<span class="built_in">local</span>/ <span class="comment">#将当前目录下的aa.txt移动到/usr/local/下面.</span></div><div class="line"><span class="comment">#这里同理可以联想下cp的复制指令</span></div><div class="line">cp FilePath newPath <span class="comment">#复制文件,注意，如果不是当前目录下的子目录，要写绝对路径</span></div></pre></td></tr></table></figure>

<h3 id="复制一个文件的内容到另一个文件">复制一个文件的内容到另一个文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">cat file1 &gt;</span> file2 <span class="comment">#将file1里的内容复制到file2里面，并覆盖file2里的内容</span></span></div><div class="line"><span class="input"><span class="prompt">cat file1 &gt;&gt;</span> file2 <span class="comment">#将file1里的内容追加到file2的结尾，不覆盖file2里的内容</span></span></div><div class="line">cat file1 file2 &gt;file <span class="comment">#依次将file1 file2 的内容添加到file3中</span></div><div class="line">cat file1 <span class="comment">#查看file1的完整内容</span></div></pre></td></tr></table></figure>

<h3 id="清空某个文件">清空某个文件</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">cat /dev/null &gt;</span> file1 <span class="comment">#将file1的内容清空，大小为0，但是不删除,原文件被放到回收站</span></span></div><div class="line">rm  file1 <span class="comment">#删除file1</span></div></pre></td></tr></table></figure>

<h3 id="删除文件夹">删除文件夹</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">rmdir</span>  --ignore-fail-<span class="built_in">on</span>-non-empty folderName </div><div class="line">        <span class="comment">#删除文件夹以及子文件夹和子文件.¬</span></div><div class="line">        <span class="comment"># --ignore-fail-on-non-empty是指忽略文件是否为空，已经执行删除</span></div><div class="line"><span class="comment">#本人不喜欢这种删除方式，想删除非空文件夹也可以使用下面的方法</span></div><div class="line">rm -rf folderName <span class="comment">#删除文件夹以及子文件夹和子文件.</span></div><div class="line">                 <span class="comment"># -r 为递归指令，Linux跟Unix 的系统之间有些会区分大小写.</span></div><div class="line">                 <span class="comment"># -f 为强制执行指令，使用需谨慎，有时候需要加上这个指令才能rm成功.</span></div><div class="line">                 <span class="comment"># -rf 如果单独使用-r,需要对每一个文件确认后才能删除,所以推荐-rf</span></div><div class="line"><span class="comment">#rm 也可以用来删除文件</span></div><div class="line">rm -r fileName  <span class="comment">#删除文件.</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="order" scheme="http://gengbiao.me/tags/order/"/>
    
      <category term="Terminal" scheme="http://gengbiao.me/categories/Terminal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo添加百度站内搜索]]></title>
    <link href="http://gengbiao.me/hexo/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    <id>http://gengbiao.me/hexo/hexo添加百度站内搜索/</id>
    <published>2014-10-01T16:00:00.000Z</published>
    <updated>2014-12-21T09:20:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo添加百度站内搜索">hexo添加百度站内搜索</h1>
<p>百度最近公开了站内搜索的公测，本人一直想做添加百度站内搜索到博客中，发现终于公测了，就抓紧下手了。<br>关于效果，首先大家可以看下<a href="http://search.gengbiao.me/cse/search?s=2049782880735612718&amp;q=" target="_blank" rel="external">我的站内搜索</a></p>
<h2 id="准备工作">准备工作</h2>
<h3 id="注册百度站长账号并添加站点">注册百度站长账号并添加站点</h3>
<p>首先你需要注册<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长</a>的账号，可以直接用百度账号登陆。<br>如果你是新用户，你首先应该在<code>我的网站/站点管理</code>里先<code>添加网站</code>.<br><img src="/img/baidu/baidu_add_site.png" alt="添加网站"><br>然后验证权限。<br><img src="/img/baidu/baidu_verification_site.png" alt="验证网站"><br>然后应该能看到验证成功。</p>
<h2 id="开启站内搜索">开启站内搜索</h2>
<p>点击<code>其他工具/站内搜索</code>.</p>
<p><img src="/img/baidu/baidu_search_config.png" alt="开始使用"></p>
<p>点击开始使用，然后跳到了这个界面。<br><img src="/img/baidu/baidu_search_main.png" alt="站内搜索"><br>填写相关信息，其实就是添加搜索框，填写完之后你就可以点击查看效果，这个时候你的站内搜索就完成了….一半了。</p>
<h3 id="提交数据">提交数据</h3>
<p>这个时候你应该发现站内搜索出来的数据很少，没错，因为即使是站内搜索，也是从百度的搜索数据库里提取的数据。所以你需要提供给百度数据。</p>
<p><del>可以点击 <code>提交数据</code> 或者 <code>收录绿色通道</code> 提交数据。</del></p>
<p><del>我发现<code>提交数据</code>跟<code>收录绿色通道</code>的两个页面<code>提交网页列表</code>选项重复了，两者只能提交一个站图，推测是刚刚公测，产品不完善的原因。这里我选择<code>收录绿色通道</code>提交数据。</del></p>
<p>发现官方的版本已经进行修改了。上面两句话可以划掉了，那么你现在可以点击<code>结果页管理</code>，左边的<code>提升收录效果</code></p>
<p><img src="/img/baidu/baidu_search_dataup.png" alt="提交数据"><br>其中<code>提交种子页面</code>写上自己的网站就可以了。<br>然后<code>提交网页列表</code>里面点击添加新数据。<br><img src="/img/baidu/baidu_search_add_data.png" alt="添加数据"><br>上图你可以看到有三个步骤。1，2，3. 在步骤1里面你可以手动添加，但是这样不仅收录效果不好，而且很麻烦。所以我步骤1直接忽略掉不填了。</p>
<p>在这里我选择第二种方式，也就是直接填步骤3，里面的添加sitemap.xml站图。<br><strong>使用hexo的朋友要注意的是：</strong><br>官方的插件列表里关于站图有两个：</p>
<p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a></p>
<p><a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">hexo-generator-baidu-sitemap</a><br>第一个不符合百度站图的标准，而且信息量很少。当时本人使用的时候发现了这个问题，遂自己开发了第二款插件。并添加了若干数据，目前还有诸多限制正在不断完善中，大家可以在<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">github</a><br>上跟我沟通，一起完善项目。<br>那么到现在事情就大功告成了！应该可以看到下图所示的内容：<br><img src="/img/baidu/baidu_sitemap_data.png" alt="百度站图"></p>
<h2 id="站内搜索优化">站内搜索优化</h2>
<h3 id="绑定二级域名">绑定二级域名</h3>
<p>大家可以看到我的站内搜索是search.gengbiao.me/xxx，不然转向的页面是<code>zhannei.baidu.com/XXX</code>,感觉像是跳出了自己的网站，非常不爽，这里可以绑定二级域名！<br>二级域名的绑定需要到你域名的DNS托管机构添加，我使用的是DNSPod.添加一条数据指向<code>zhannei.baidu.com</code><br><img src="/img/domain/dns_domain_twolevel.png" alt="二级域名解析"><br>就这样，你就可以使用自己的二级域名进行搜索了。</p>
<h3 id="结果页设置/搜索框样式">结果页设置/搜索框样式</h3>
<p>这个很简单，在百度站内搜索上都有引导的，大家可以尝试下。</p>
<p>另外目前百度提供自定义页面的head部分，其实就是个iframe,但是本人亲测不好用。坐等百度更新了。</p>
]]></content>
    
    
      <category term="DIY" scheme="http://gengbiao.me/tags/DIY/"/>
    
      <category term="hexo" scheme="http://gengbiao.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下终极shell—zsh + vim 的配色方案]]></title>
    <link href="http://gengbiao.me/Mac/Mac%E4%B8%8B%E7%BB%88%E6%9E%81shell%E2%80%94zsh_+_vim_%E7%9A%84%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
    <id>http://gengbiao.me/Mac/Mac下终极shell—zsh_+_vim_的配色方案/</id>
    <published>2014-09-21T16:00:00.000Z</published>
    <updated>2014-11-12T04:08:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mac下_终端_+_vim_的配色方案">Mac下 终端 + vim 的配色方案</h1>
<p>前两天电脑挂掉了，重新配置了工作环境，顺手记录一下。</p>
<h2 id="终端的配色">终端的配色</h2>
<p>———-先放着。。明天补。。-_-!<br>国庆本来打算整理下这些东西，无意间发现了zsh这货，把shell更换成zsh后发现终端变得<br>好迅速。</p>
<h2 id="什么是zsh">什么是zsh</h2>
<p>好吧，想知道这个，首先要明白什么是shell</p>
<h3 id="什么是shell">什么是shell</h3>
<p>shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收<br>用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是<br>真正干活的，干完之后再把结果返回用户或应用程序。<br>想查看本机有多少shell，可以使用指令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> /etc/shells</div></pre></td></tr></table></figure>

<p>显示如下<br><img src="http://coney.qiniudn.com/mac_5FAE29D3-8FD0-4FF2-923C-77388C6CD0FD.png?attname=&amp;e=1412860785&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:By1m3MYhwz5tTZjOpoyZyZLa0WI" alt="shells List"><br>这都不是重点，重点是zsh这个shell<br>目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是<br>深藏不露的 zsh， 这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但<br>是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不<br>说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的<br>zsh项目，叫做「oh my zsh」，Github 网址是：<br><a href="https://github.com/robbyrussell/oh-my-zsh。" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh。</a>  这玩意就像「X天叫你学会 C++」系列，可<br>以让你神功速成，而且是真的。</p>
<h2 id="安装zsh">安装zsh</h2>
<p>这里只写出mac的安装方法，其他方法可以看github的主页。<br>自动安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/raw/master/tools/install.<span class="keyword">sh</span> -O -| <span class="keyword">sh</span></div></pre></td></tr></table></figure>

<p>手动安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div><div class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-<span class="keyword">template</span> ~/.zshrc</div></pre></td></tr></table></figure>

<p>然后重新打开一个终端窗口默认shell就变成zsh了。<br>cool！</p>
<h2 id="配置zsh">配置zsh</h2>
<p>zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开<br>.zshrc<br>需要注意的是,以前用过shell的大家应该都用过<code>.bash_profile</code>,这里其实<code>.zshrc</code>跟<br><code>.bash_profile</code>本质上是一样的，可以把代码直接粘贴过来。然后附录一些个人认为比较<br>好用的配置。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="title">cls</span>=<span class="comment">'clear'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">ll</span>=<span class="comment">'ls -l'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">la</span>=<span class="comment">'ls -a'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">vi</span>=<span class="comment">'vim'</span></div><div class="line"><span class="keyword">alias</span> <span class="title">javac</span>=<span class="string">"javac -J-Dfile.encoding=utf8"</span></div><div class="line"><span class="keyword">alias</span> <span class="title">grep</span>=<span class="string">"grep --color=auto"</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">html</span>=vi<span class="preprocessor">   # 在命令行直接输入后缀为 html 的文件名，会在 vim 中打开,如果想用TextMate打开可以将vi改成mate</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">rb</span>=vi<span class="preprocessor">     # 在命令行直接输入 ruby 文件，会在 vim 中打开</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">py</span>=vi<span class="preprocessor">       # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">js</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">c</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">java</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">txt</span>=vi</div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">gz</span>=<span class="comment">'tar -xzvf'  #表示自动解压后缀为 gz 的压缩包。</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">tgz</span>=<span class="comment">'tar -xzvf'</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">zip</span>=<span class="comment">'unzip'</span></div><div class="line"><span class="keyword">alias</span> -<span class="title">s</span> <span class="title">bz2</span>=<span class="comment">'tar -xjvf'</span></div></pre></td></tr></table></figure>

<p>也可以修改主题，默认主题是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ZSH_THEME</span>=<span class="string">”robbyrussell”</span></div></pre></td></tr></table></figure>

<h2 id="插件zsh">插件zsh</h2>
<p>在这里就说一个必装的插件。<br>autojump：zsh 和 autojump 的组合形成了 zsh 下最强悍的插件。<br>Mac安装可以使用brew</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> autojump</span></div></pre></td></tr></table></figure>

<p>注意，虽然是自动安装，但是可能因为权限问题，还需要自己手动在<code>.zshrc</code>里添加如下代<br>码,而且Mac跟linux的指令还不太一样，Mac的指令如下所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[ -s `brew --prefix`/etc/autojump.sh  ]]</span> && . `brew <span class="comment">--prefix`/etc/autojump.sh</span></div></pre></td></tr></table></figure>

<p>Linux安装的话需要先clone项目。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/joelthelion/autojump.git</div></pre></td></tr></table></figure>

<p>然后找到目录，执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./install.<span class="keyword">py</span></div></pre></td></tr></table></figure>

<p>最后需要自己手动在<code>.zshrc</code>里添加如下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[ -s ~/.autojump/etc/profile.d/autojump.sh  ]]</span> && .~/.autojump/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure>

<p>大功告成。<br>关于终端配色与vim配色，下次单开一章来写。</p>
]]></content>
    
    
      <category term="Vim" scheme="http://gengbiao.me/tags/Vim/"/>
    
      <category term="terminal" scheme="http://gengbiao.me/tags/terminal/"/>
    
      <category term="Mac" scheme="http://gengbiao.me/categories/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git 常见问题汇总]]></title>
    <link href="http://gengbiao.me/git/git_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://gengbiao.me/git/git_常见问题汇总/</id>
    <published>2014-09-21T16:00:00.000Z</published>
    <updated>2014-11-12T04:07:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git_常见问题汇总">git 常见问题汇总</h1>
<h2 id="github_Contributions_Calendar不记录">github Contributions Calendar不记录</h2>
<p>一开始为了方便直接用ssh登陆了，结果github发现我push的账号email跟我的github上public的email不一样，果断悲剧了。就是calendar这个东西没有提交动态。。<br><img src="http://coney.qiniudn.com/git_calendar.png?attname=&amp;e=1412907149&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:Js1kVBGoxO6MwQgdtZixirfhzs8" alt="github_calendar"><br>于是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config <span class="literal">user</span>.email</div></pre></td></tr></table></figure>

<p>这个时候当然什么都没有，最开始登陆是直接ssh登陆的，没有config这些东西。<br>然后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> config user.email <span class="string">"username<span class="variable">@email</span>.com"</span></div></pre></td></tr></table></figure>

<p>搞定。</p>
<h2 id="github_add_的不同形式">github add 的不同形式</h2>
<p>git add命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。<br>基本上会用到下面的几个命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">git add xxx</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git add —all</td>
<td>第一次提交的时候需要使用git add —all,将数据初始化到索引库中。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add path</td>
<td>通过git add <path>的形式把我们<path>添加到索引库中，<path>可以是文件也可以是目录。git不仅能判断出<path>中，修改（不包括已删除）的文件，还能判断出新添的文件，并把它们的信息添加到索引库中。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add -u [<path>]</td>
<td>把<path>中所有tracked文件中被修改过或已删除文件的信息添加到索引库。它不会处理untracted的文件。省略<path>表示.,即当前目录。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add -A [<path>]</td>
<td>表示把<path>中所有tracked文件中被修改过或已删除文件和所有untracted的文件信息添加到索引库。省略<path>表示.,即当前目录。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">git add -i</td>
<td>通过git add -i [<path>]命令查看<path>中被所有修改过或已删除文件但没有提交的文件，并通过其revert子命令可以查看<path>中所有untracted的文件，同时进入一个子命令系统。（见下图）</td>
<td></td>
</tr>
</tbody>
</table>
<p><img src="http://coney.qiniudn.com/git_add_i.png?attname=&amp;e=1412906967&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:ZM2n0HhwbQYBVlD7WXZJhlhA84o" alt="git_add_i"></p>
]]></content>
    
    
      <category term="git" scheme="http://gengbiao.me/tags/git/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蓝牙4.0，物联网时代的垫脚石]]></title>
    <link href="http://gengbiao.me/technique/%E8%93%9D%E7%89%994.0%EF%BC%8C%E7%89%A9%E8%81%94%E7%BD%91%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9E%AB%E8%84%9A%E7%9F%B3/"/>
    <id>http://gengbiao.me/technique/蓝牙4.0，物联网时代的垫脚石/</id>
    <published>2014-09-15T13:08:18.000Z</published>
    <updated>2014-11-12T04:13:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="蓝牙4-0，物联网时代的垫脚石">蓝牙4.0，物联网时代的垫脚石</h1>
<p>最近工作需要用到蓝牙4.0，整理了一些信息，分享一下。<br>蓝牙 4.0 的标准早在 2010 年 7 月就已经发布，但真正应用于智能手机则是在 2011 年 9 月 iPhone 4S 发布之后。尽管随后 Galaxy S3、Galaxy Note 2 等一批支持蓝牙 4.0 的 Android 机型纷至沓来，但 Android 原生系统始终缺乏预设蓝牙框架，由于系统底层蓝牙驱动不同，开发者无法在不同品牌不同机型的 Android 手机上做一些蓝牙外设。<br>而在Android 4.3 的发布会上，google终于带来了 Bluetooth 4.0 Low Energy。这必将是一个物联网加速发展的大好时机。</p>
<h2 id="蓝牙4-0较之前有什么较重要的改进：">蓝牙4.0较之前有什么较重要的改进：</h2>
<table>
<thead>
<tr>
<th>技术规范</th>
<th>经典蓝牙（2.1 &amp;3.0）</th>
<th>低功耗蓝牙（4.0）</th>
</tr>
</thead>
<tbody>
<tr>
<td>无线电频率</td>
<td>2.4GHz</td>
<td>2.4GHz</td>
</tr>
<tr>
<td>距离</td>
<td>10米/100米</td>
<td>30米</td>
<td></td>
</tr>
<tr>
<td>数据速率</td>
<td>1-3Mbps</td>
<td>1Mbps</td>
<td></td>
</tr>
<tr>
<td>应用吞吐量</td>
<td>0.7-2.1Mbps</td>
<td>0.2Mbps</td>
<td></td>
</tr>
<tr>
<td>发送数据的总时间</td>
<td>100ms</td>
<td>&lt;6ms</td>
<td></td>
</tr>
<tr>
<td>耗电量</td>
<td>1</td>
<td>0.01至0.5</td>
<td></td>
</tr>
<tr>
<td>最大操作电流</td>
<td>&lt;30mA</td>
<td>&lt;15mA（最高运行时为15 mA）</td>
<td></td>
</tr>
<tr>
<td>主要用途</td>
<td>手机，游戏机，耳机，立体声音频流，汽车和PC等</td>
<td>手机，游戏机，PC，表，体育和健身，医疗保健，汽车，家用电子，自动化和工业等</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li><p>低能耗！</p>
<p>   蓝牙4.0可以用更低的功耗传输更远的距离，而且在待机状态（不使用）的情况下，耗电量几乎可以忽略不计，据称一颗纽扣电池就可以待机数年之久。注意，这里说的是 待机。<br>   在真正传输数据时耗电量并没有很大改观，但是在待机的时候大大降低了耗电量。</p>
</li>
<li><p>更长的传输距离！</p>
<p>  从蓝牙4.0的规范标准来看，其中有一点就是高达100米的传输距离，这在以前是不敢想象的.<br> 一般的蓝牙设备，也就是10米范围内，好一点的也不会超过20米的传输距离，在4.0之前，最高速度24Mbps的蓝牙技术高速规范提高了蓝牙设备的门槛，比如当初森海塞尔RS180无线耳机，作为一款2.4G设备竟然能有100米的传输距离令业界惊奇了好久。<br>但是相信4.0普及以后，轻轻松松就可以达到这个成绩。</p>
</li>
<li><p>其他的包括速度，延迟，安全方面的改进就不详细介绍了。</p>
<h2 id="蓝牙4-+必将助力物联网">蓝牙4.+必将助力物联网</h2>
<p>蓝牙4.1出来了。蓝牙4.1新技术全面解析：这次蓝牙4.1玩了回大的—IOT（物联网）。而为了实现这一点，迎合可穿戴和多设备连接，对通讯功能的改进（改善数据传输能力）成为4.1标准最重要的升级之一。听说5.0还要全面组网。</p>
<h2 id="关于开发">关于开发</h2>
<p>下图为蓝牙4.0的模块图<br><img src="http://coney.qiniudn.com/blog_ble4.0.png?attname=&amp;e=1412907149&amp;token=gJq7XMKe61C7zF73uUsV1e9QYqD3-fJSyQAAZZZr:1kFE0vBHkr4uEEs8xW41YmIEvK8" alt="bluetooth4.0"><br>根据模块图可以看出，蓝牙核心规范4.0的模块增加了以下几个蓝牙低功耗组件。</p>
</li>
</ul>
<ul>
<li>GATT表示服务器属性和客户端属性，描述了属性服务器中使用的服务层次，特点和属    性。BLE设备使用它作为蓝牙低功耗应用规范的服务发现。</li>
<li><p>ATT实现了属性客户端和服务器之间的点对点协议。ATT客户端给ATT服务器发送请命令。ATT服务器向ATT客户端发送回复和通知。</p>
</li>
<li><p>SMP用于生成对等协议的加密密钥和身份密钥。SMP管理加密密钥和身份密钥的存储，它通过生成和解析设备的地址来识别蓝牙设备。</p>
</li>
</ul>
<p>稍后写出demo来会继续分享。</p>
]]></content>
    
    
      <category term="技术普及" scheme="http://gengbiao.me/tags/%E6%8A%80%E6%9C%AF%E6%99%AE%E5%8F%8A/"/>
    
      <category term="蓝牙4.0" scheme="http://gengbiao.me/tags/%E8%93%9D%E7%89%994-0/"/>
    
      <category term="智能硬件" scheme="http://gengbiao.me/tags/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="物联网" scheme="http://gengbiao.me/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="技术" scheme="http://gengbiao.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
